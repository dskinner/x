// File is automatically generated by gen.go. DO NOT EDIT.

package main

import (
	"archive/tar"
	"archive/zip"
	"bufio"
	"bytes"
	"compress/bzip2"
	"compress/flate"
	"compress/gzip"
	"compress/lzw"
	"compress/zlib"
	"container/heap"
	"container/list"
	"container/ring"
	"context"
	"crypto"
	"crypto/aes"
	"crypto/cipher"
	"crypto/des"
	"crypto/dsa"
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/hmac"
	"crypto/md5"
	crand "crypto/rand"
	"crypto/rc4"
	"crypto/rsa"
	"crypto/sha1"
	"crypto/sha256"
	"crypto/sha512"
	"crypto/subtle"
	"crypto/tls"
	"crypto/x509"
	"database/sql"
	"database/sql/driver"
	"encoding/ascii85"
	"encoding/asn1"
	"encoding/base32"
	"encoding/base64"
	"encoding/binary"
	"encoding/csv"
	"encoding/gob"
	"encoding/hex"
	"encoding/json"
	"encoding/pem"
	"encoding/xml"
	"errors"
	"expvar"
	"flag"
	"fmt"
	"hash/adler32"
	"hash/crc32"
	"hash/crc64"
	"hash/fnv"
	"html"
	htemplate "html/template"
	"image"
	"image/color"
	"image/color/palette"
	"image/draw"
	"image/gif"
	"image/jpeg"
	"image/png"
	"index/suffixarray"
	"io"
	"io/ioutil"
	"log"
	"log/syslog"
	"math"
	"math/big"
	"math/bits"
	"math/cmplx"
	"math/rand"
	"mime"
	"mime/multipart"
	"mime/quotedprintable"
	"net"
	"net/http"
	"net/http/cgi"
	"net/http/cookiejar"
	"net/http/fcgi"
	"net/http/httptest"
	"net/http/httptrace"
	"net/http/httputil"
	"net/http/pprof"
	"net/mail"
	"net/rpc"
	"net/rpc/jsonrpc"
	"net/smtp"
	"net/textproto"
	"net/url"
	"os"
	"os/exec"
	"os/signal"
	"os/user"
	"path"
	"path/filepath"
	"plugin"
	"reflect"
	"regexp"
	"regexp/syntax"
	"sort"
	"strconv"
	"strings"
	"sync"
	"sync/atomic"
	"text/scanner"
	"text/tabwriter"
	"text/template"
	"text/template/parse"
	"time"
	"unicode"
	"unicode/utf16"
	"unicode/utf8"
)

var pkgmap = map[string]map[string]interface{}{
	"adler32": map[string]interface{}{
		"Checksum": adler32.Checksum,
		"New":      adler32.New,
		"Size":     adler32.Size,
	},
	"aes": map[string]interface{}{
		"BlockSize": aes.BlockSize,
		"NewCipher": aes.NewCipher,
	},
	"ascii85": map[string]interface{}{
		"Decode":        ascii85.Decode,
		"Encode":        ascii85.Encode,
		"MaxEncodedLen": ascii85.MaxEncodedLen,
		"NewDecoder":    ascii85.NewDecoder,
		"NewEncoder":    ascii85.NewEncoder,
	},
	"asn1": map[string]interface{}{
		"ClassApplication":     asn1.ClassApplication,
		"ClassContextSpecific": asn1.ClassContextSpecific,
		"ClassPrivate":         asn1.ClassPrivate,
		"ClassUniversal":       asn1.ClassUniversal,
		"Marshal":              asn1.Marshal,
		"MarshalWithParams":    asn1.MarshalWithParams,
		"NullBytes":            asn1.NullBytes,
		"NullRawValue":         asn1.NullRawValue,
		"TagBitString":         asn1.TagBitString,
		"TagBoolean":           asn1.TagBoolean,
		"TagEnum":              asn1.TagEnum,
		"TagGeneralString":     asn1.TagGeneralString,
		"TagGeneralizedTime":   asn1.TagGeneralizedTime,
		"TagIA5String":         asn1.TagIA5String,
		"TagInteger":           asn1.TagInteger,
		"TagNull":              asn1.TagNull,
		"TagNumericString":     asn1.TagNumericString,
		"TagOID":               asn1.TagOID,
		"TagOctetString":       asn1.TagOctetString,
		"TagPrintableString":   asn1.TagPrintableString,
		"TagSequence":          asn1.TagSequence,
		"TagSet":               asn1.TagSet,
		"TagT61String":         asn1.TagT61String,
		"TagUTCTime":           asn1.TagUTCTime,
		"TagUTF8String":        asn1.TagUTF8String,
		"Unmarshal":            asn1.Unmarshal,
		"UnmarshalWithParams":  asn1.UnmarshalWithParams,
	},
	"atomic": map[string]interface{}{
		"AddInt32":              atomic.AddInt32,
		"AddInt64":              atomic.AddInt64,
		"AddUint32":             atomic.AddUint32,
		"AddUint64":             atomic.AddUint64,
		"AddUintptr":            atomic.AddUintptr,
		"CompareAndSwapInt32":   atomic.CompareAndSwapInt32,
		"CompareAndSwapInt64":   atomic.CompareAndSwapInt64,
		"CompareAndSwapPointer": atomic.CompareAndSwapPointer,
		"CompareAndSwapUint32":  atomic.CompareAndSwapUint32,
		"CompareAndSwapUint64":  atomic.CompareAndSwapUint64,
		"CompareAndSwapUintptr": atomic.CompareAndSwapUintptr,
		"LoadInt32":             atomic.LoadInt32,
		"LoadInt64":             atomic.LoadInt64,
		"LoadPointer":           atomic.LoadPointer,
		"LoadUint32":            atomic.LoadUint32,
		"LoadUint64":            atomic.LoadUint64,
		"LoadUintptr":           atomic.LoadUintptr,
		"StoreInt32":            atomic.StoreInt32,
		"StoreInt64":            atomic.StoreInt64,
		"StorePointer":          atomic.StorePointer,
		"StoreUint32":           atomic.StoreUint32,
		"StoreUint64":           atomic.StoreUint64,
		"StoreUintptr":          atomic.StoreUintptr,
		"SwapInt32":             atomic.SwapInt32,
		"SwapInt64":             atomic.SwapInt64,
		"SwapPointer":           atomic.SwapPointer,
		"SwapUint32":            atomic.SwapUint32,
		"SwapUint64":            atomic.SwapUint64,
		"SwapUintptr":           atomic.SwapUintptr,
	},
	"base32": map[string]interface{}{
		"HexEncoding": base32.HexEncoding,
		"NewDecoder":  base32.NewDecoder,
		"NewEncoder":  base32.NewEncoder,
		"NewEncoding": base32.NewEncoding,
		"NoPadding":   base32.NoPadding,
		"StdEncoding": base32.StdEncoding,
		"StdPadding":  base32.StdPadding,
	},
	"base64": map[string]interface{}{
		"NewDecoder":     base64.NewDecoder,
		"NewEncoder":     base64.NewEncoder,
		"NewEncoding":    base64.NewEncoding,
		"NoPadding":      base64.NoPadding,
		"RawStdEncoding": base64.RawStdEncoding,
		"RawURLEncoding": base64.RawURLEncoding,
		"StdEncoding":    base64.StdEncoding,
		"StdPadding":     base64.StdPadding,
		"URLEncoding":    base64.URLEncoding,
	},
	"big": map[string]interface{}{
		"Above":         big.Above,
		"AwayFromZero":  big.AwayFromZero,
		"Below":         big.Below,
		"Exact":         big.Exact,
		"Jacobi":        big.Jacobi,
		"MaxBase":       big.MaxBase,
		"MaxExp":        big.MaxExp,
		"MaxPrec":       big.MaxPrec,
		"MinExp":        big.MinExp,
		"NewFloat":      big.NewFloat,
		"NewInt":        big.NewInt,
		"NewRat":        big.NewRat,
		"ParseFloat":    big.ParseFloat,
		"ToNearestAway": big.ToNearestAway,
		"ToNearestEven": big.ToNearestEven,
		"ToNegativeInf": big.ToNegativeInf,
		"ToPositiveInf": big.ToPositiveInf,
		"ToZero":        big.ToZero,
	},
	"binary": map[string]interface{}{
		"BigEndian":      binary.BigEndian,
		"LittleEndian":   binary.LittleEndian,
		"MaxVarintLen16": binary.MaxVarintLen16,
		"MaxVarintLen32": binary.MaxVarintLen32,
		"MaxVarintLen64": binary.MaxVarintLen64,
		"PutUvarint":     binary.PutUvarint,
		"PutVarint":      binary.PutVarint,
		"Read":           binary.Read,
		"ReadUvarint":    binary.ReadUvarint,
		"ReadVarint":     binary.ReadVarint,
		"Size":           binary.Size,
		"Uvarint":        binary.Uvarint,
		"Varint":         binary.Varint,
		"Write":          binary.Write,
	},
	"bits": map[string]interface{}{
		"LeadingZeros":    bits.LeadingZeros,
		"LeadingZeros16":  bits.LeadingZeros16,
		"LeadingZeros32":  bits.LeadingZeros32,
		"LeadingZeros64":  bits.LeadingZeros64,
		"LeadingZeros8":   bits.LeadingZeros8,
		"Len":             bits.Len,
		"Len16":           bits.Len16,
		"Len32":           bits.Len32,
		"Len64":           bits.Len64,
		"Len8":            bits.Len8,
		"OnesCount":       bits.OnesCount,
		"OnesCount16":     bits.OnesCount16,
		"OnesCount32":     bits.OnesCount32,
		"OnesCount64":     bits.OnesCount64,
		"OnesCount8":      bits.OnesCount8,
		"Reverse":         bits.Reverse,
		"Reverse16":       bits.Reverse16,
		"Reverse32":       bits.Reverse32,
		"Reverse64":       bits.Reverse64,
		"Reverse8":        bits.Reverse8,
		"ReverseBytes":    bits.ReverseBytes,
		"ReverseBytes16":  bits.ReverseBytes16,
		"ReverseBytes32":  bits.ReverseBytes32,
		"ReverseBytes64":  bits.ReverseBytes64,
		"RotateLeft":      bits.RotateLeft,
		"RotateLeft16":    bits.RotateLeft16,
		"RotateLeft32":    bits.RotateLeft32,
		"RotateLeft64":    bits.RotateLeft64,
		"RotateLeft8":     bits.RotateLeft8,
		"TrailingZeros":   bits.TrailingZeros,
		"TrailingZeros16": bits.TrailingZeros16,
		"TrailingZeros32": bits.TrailingZeros32,
		"TrailingZeros64": bits.TrailingZeros64,
		"TrailingZeros8":  bits.TrailingZeros8,
		"UintSize":        bits.UintSize,
	},
	"bufio": map[string]interface{}{
		"ErrAdvanceTooFar":     bufio.ErrAdvanceTooFar,
		"ErrBufferFull":        bufio.ErrBufferFull,
		"ErrFinalToken":        bufio.ErrFinalToken,
		"ErrInvalidUnreadByte": bufio.ErrInvalidUnreadByte,
		"ErrInvalidUnreadRune": bufio.ErrInvalidUnreadRune,
		"ErrNegativeAdvance":   bufio.ErrNegativeAdvance,
		"ErrNegativeCount":     bufio.ErrNegativeCount,
		"ErrTooLong":           bufio.ErrTooLong,
		"MaxScanTokenSize":     bufio.MaxScanTokenSize,
		"NewReadWriter":        bufio.NewReadWriter,
		"NewReader":            bufio.NewReader,
		"NewReaderSize":        bufio.NewReaderSize,
		"NewScanner":           bufio.NewScanner,
		"NewWriter":            bufio.NewWriter,
		"NewWriterSize":        bufio.NewWriterSize,
		"ScanBytes":            bufio.ScanBytes,
		"ScanLines":            bufio.ScanLines,
		"ScanRunes":            bufio.ScanRunes,
		"ScanWords":            bufio.ScanWords,
	},
	"bytes": map[string]interface{}{
		"Compare":         bytes.Compare,
		"Contains":        bytes.Contains,
		"ContainsAny":     bytes.ContainsAny,
		"ContainsRune":    bytes.ContainsRune,
		"Count":           bytes.Count,
		"Equal":           bytes.Equal,
		"EqualFold":       bytes.EqualFold,
		"ErrTooLarge":     bytes.ErrTooLarge,
		"Fields":          bytes.Fields,
		"FieldsFunc":      bytes.FieldsFunc,
		"HasPrefix":       bytes.HasPrefix,
		"HasSuffix":       bytes.HasSuffix,
		"Index":           bytes.Index,
		"IndexAny":        bytes.IndexAny,
		"IndexByte":       bytes.IndexByte,
		"IndexFunc":       bytes.IndexFunc,
		"IndexRune":       bytes.IndexRune,
		"Join":            bytes.Join,
		"LastIndex":       bytes.LastIndex,
		"LastIndexAny":    bytes.LastIndexAny,
		"LastIndexByte":   bytes.LastIndexByte,
		"LastIndexFunc":   bytes.LastIndexFunc,
		"Map":             bytes.Map,
		"MinRead":         bytes.MinRead,
		"NewBuffer":       bytes.NewBuffer,
		"NewBufferString": bytes.NewBufferString,
		"NewReader":       bytes.NewReader,
		"Repeat":          bytes.Repeat,
		"Replace":         bytes.Replace,
		"Runes":           bytes.Runes,
		"Split":           bytes.Split,
		"SplitAfter":      bytes.SplitAfter,
		"SplitAfterN":     bytes.SplitAfterN,
		"SplitN":          bytes.SplitN,
		"Title":           bytes.Title,
		"ToLower":         bytes.ToLower,
		"ToLowerSpecial":  bytes.ToLowerSpecial,
		"ToTitle":         bytes.ToTitle,
		"ToTitleSpecial":  bytes.ToTitleSpecial,
		"ToUpper":         bytes.ToUpper,
		"ToUpperSpecial":  bytes.ToUpperSpecial,
		"Trim":            bytes.Trim,
		"TrimFunc":        bytes.TrimFunc,
		"TrimLeft":        bytes.TrimLeft,
		"TrimLeftFunc":    bytes.TrimLeftFunc,
		"TrimPrefix":      bytes.TrimPrefix,
		"TrimRight":       bytes.TrimRight,
		"TrimRightFunc":   bytes.TrimRightFunc,
		"TrimSpace":       bytes.TrimSpace,
		"TrimSuffix":      bytes.TrimSuffix,
	},
	"bzip2": map[string]interface{}{
		"NewReader": bzip2.NewReader,
	},
	"cgi": map[string]interface{}{
		"Request":        cgi.Request,
		"RequestFromMap": cgi.RequestFromMap,
		"Serve":          cgi.Serve,
	},
	"cipher": map[string]interface{}{
		"NewCBCDecrypter":     cipher.NewCBCDecrypter,
		"NewCBCEncrypter":     cipher.NewCBCEncrypter,
		"NewCFBDecrypter":     cipher.NewCFBDecrypter,
		"NewCFBEncrypter":     cipher.NewCFBEncrypter,
		"NewCTR":              cipher.NewCTR,
		"NewGCM":              cipher.NewGCM,
		"NewGCMWithNonceSize": cipher.NewGCMWithNonceSize,
		"NewOFB":              cipher.NewOFB,
	},
	"cmplx": map[string]interface{}{
		"Abs":   cmplx.Abs,
		"Acos":  cmplx.Acos,
		"Acosh": cmplx.Acosh,
		"Asin":  cmplx.Asin,
		"Asinh": cmplx.Asinh,
		"Atan":  cmplx.Atan,
		"Atanh": cmplx.Atanh,
		"Conj":  cmplx.Conj,
		"Cos":   cmplx.Cos,
		"Cosh":  cmplx.Cosh,
		"Cot":   cmplx.Cot,
		"Exp":   cmplx.Exp,
		"Inf":   cmplx.Inf,
		"IsInf": cmplx.IsInf,
		"IsNaN": cmplx.IsNaN,
		"Log":   cmplx.Log,
		"Log10": cmplx.Log10,
		"NaN":   cmplx.NaN,
		"Phase": cmplx.Phase,
		"Polar": cmplx.Polar,
		"Pow":   cmplx.Pow,
		"Rect":  cmplx.Rect,
		"Sin":   cmplx.Sin,
		"Sinh":  cmplx.Sinh,
		"Sqrt":  cmplx.Sqrt,
		"Tan":   cmplx.Tan,
		"Tanh":  cmplx.Tanh,
	},
	"color": map[string]interface{}{
		"Alpha16Model": color.Alpha16Model,
		"AlphaModel":   color.AlphaModel,
		"Black":        color.Black,
		"CMYKModel":    color.CMYKModel,
		"CMYKToRGB":    color.CMYKToRGB,
		"Gray16Model":  color.Gray16Model,
		"GrayModel":    color.GrayModel,
		"ModelFunc":    color.ModelFunc,
		"NRGBA64Model": color.NRGBA64Model,
		"NRGBAModel":   color.NRGBAModel,
		"NYCbCrAModel": color.NYCbCrAModel,
		"Opaque":       color.Opaque,
		"RGBA64Model":  color.RGBA64Model,
		"RGBAModel":    color.RGBAModel,
		"RGBToCMYK":    color.RGBToCMYK,
		"RGBToYCbCr":   color.RGBToYCbCr,
		"Transparent":  color.Transparent,
		"White":        color.White,
		"YCbCrModel":   color.YCbCrModel,
		"YCbCrToRGB":   color.YCbCrToRGB,
	},
	"context": map[string]interface{}{
		"Background":       context.Background,
		"Canceled":         context.Canceled,
		"DeadlineExceeded": context.DeadlineExceeded,
		"TODO":             context.TODO,
		"WithCancel":       context.WithCancel,
		"WithDeadline":     context.WithDeadline,
		"WithTimeout":      context.WithTimeout,
		"WithValue":        context.WithValue,
	},
	"cookiejar": map[string]interface{}{
		"New": cookiejar.New,
	},
	"crand": map[string]interface{}{
		"Int":    crand.Int,
		"Prime":  crand.Prime,
		"Read":   crand.Read,
		"Reader": crand.Reader,
	},
	"crc32": map[string]interface{}{
		"Castagnoli":   crc32.Castagnoli,
		"Checksum":     crc32.Checksum,
		"ChecksumIEEE": crc32.ChecksumIEEE,
		"IEEE":         crc32.IEEE,
		"IEEETable":    crc32.IEEETable,
		"Koopman":      crc32.Koopman,
		"MakeTable":    crc32.MakeTable,
		"New":          crc32.New,
		"NewIEEE":      crc32.NewIEEE,
		"Size":         crc32.Size,
		"Update":       crc32.Update,
	},
	"crc64": map[string]interface{}{
		"Checksum":  crc64.Checksum,
		"ECMA":      uint64(crc64.ECMA),
		"ISO":       uint64(crc64.ISO),
		"MakeTable": crc64.MakeTable,
		"New":       crc64.New,
		"Size":      crc64.Size,
		"Update":    crc64.Update,
	},
	"crypto": map[string]interface{}{
		"BLAKE2b_256":  crypto.BLAKE2b_256,
		"BLAKE2b_384":  crypto.BLAKE2b_384,
		"BLAKE2b_512":  crypto.BLAKE2b_512,
		"BLAKE2s_256":  crypto.BLAKE2s_256,
		"MD4":          crypto.MD4,
		"MD5":          crypto.MD5,
		"MD5SHA1":      crypto.MD5SHA1,
		"RIPEMD160":    crypto.RIPEMD160,
		"RegisterHash": crypto.RegisterHash,
		"SHA1":         crypto.SHA1,
		"SHA224":       crypto.SHA224,
		"SHA256":       crypto.SHA256,
		"SHA384":       crypto.SHA384,
		"SHA3_224":     crypto.SHA3_224,
		"SHA3_256":     crypto.SHA3_256,
		"SHA3_384":     crypto.SHA3_384,
		"SHA3_512":     crypto.SHA3_512,
		"SHA512":       crypto.SHA512,
		"SHA512_224":   crypto.SHA512_224,
		"SHA512_256":   crypto.SHA512_256,
	},
	"csv": map[string]interface{}{
		"ErrBareQuote":     csv.ErrBareQuote,
		"ErrFieldCount":    csv.ErrFieldCount,
		"ErrQuote":         csv.ErrQuote,
		"ErrTrailingComma": csv.ErrTrailingComma,
		"NewReader":        csv.NewReader,
		"NewWriter":        csv.NewWriter,
	},
	"des": map[string]interface{}{
		"BlockSize":          des.BlockSize,
		"NewCipher":          des.NewCipher,
		"NewTripleDESCipher": des.NewTripleDESCipher,
	},
	"draw": map[string]interface{}{
		"Draw":           draw.Draw,
		"DrawMask":       draw.DrawMask,
		"FloydSteinberg": draw.FloydSteinberg,
		"Over":           draw.Over,
		"Src":            draw.Src,
	},
	"driver": map[string]interface{}{
		"Bool":                      driver.Bool,
		"DefaultParameterConverter": driver.DefaultParameterConverter,
		"ErrBadConn":                driver.ErrBadConn,
		"ErrRemoveArgument":         driver.ErrRemoveArgument,
		"ErrSkip":                   driver.ErrSkip,
		"Int32":                     driver.Int32,
		"IsScanValue":               driver.IsScanValue,
		"IsValue":                   driver.IsValue,
		"ResultNoRows":              driver.ResultNoRows,
		"String":                    driver.String,
	},
	"dsa": map[string]interface{}{
		"ErrInvalidPublicKey": dsa.ErrInvalidPublicKey,
		"GenerateKey":         dsa.GenerateKey,
		"GenerateParameters":  dsa.GenerateParameters,
		"L1024N160":           dsa.L1024N160,
		"L2048N224":           dsa.L2048N224,
		"L2048N256":           dsa.L2048N256,
		"L3072N256":           dsa.L3072N256,
		"Sign":                dsa.Sign,
		"Verify":              dsa.Verify,
	},
	"ecdsa": map[string]interface{}{
		"GenerateKey": ecdsa.GenerateKey,
		"Sign":        ecdsa.Sign,
		"Verify":      ecdsa.Verify,
	},
	"elliptic": map[string]interface{}{
		"GenerateKey": elliptic.GenerateKey,
		"Marshal":     elliptic.Marshal,
		"P224":        elliptic.P224,
		"P256":        elliptic.P256,
		"P384":        elliptic.P384,
		"P521":        elliptic.P521,
		"Unmarshal":   elliptic.Unmarshal,
	},
	"errors": map[string]interface{}{
		"New": errors.New,
	},
	"exec": map[string]interface{}{
		"Command":        exec.Command,
		"CommandContext": exec.CommandContext,
		"ErrNotFound":    exec.ErrNotFound,
		"LookPath":       exec.LookPath,
	},
	"expvar": map[string]interface{}{
		"Do":        expvar.Do,
		"Get":       expvar.Get,
		"Handler":   expvar.Handler,
		"NewFloat":  expvar.NewFloat,
		"NewInt":    expvar.NewInt,
		"NewMap":    expvar.NewMap,
		"NewString": expvar.NewString,
		"Publish":   expvar.Publish,
	},
	"fcgi": map[string]interface{}{
		"ErrConnClosed":     fcgi.ErrConnClosed,
		"ErrRequestAborted": fcgi.ErrRequestAborted,
		"ProcessEnv":        fcgi.ProcessEnv,
		"Serve":             fcgi.Serve,
	},
	"filepath": map[string]interface{}{
		"Abs":           filepath.Abs,
		"Base":          filepath.Base,
		"Clean":         filepath.Clean,
		"Dir":           filepath.Dir,
		"ErrBadPattern": filepath.ErrBadPattern,
		"EvalSymlinks":  filepath.EvalSymlinks,
		"Ext":           filepath.Ext,
		"FromSlash":     filepath.FromSlash,
		"Glob":          filepath.Glob,
		"HasPrefix":     filepath.HasPrefix,
		"IsAbs":         filepath.IsAbs,
		"Join":          filepath.Join,
		"ListSeparator": filepath.ListSeparator,
		"Match":         filepath.Match,
		"Rel":           filepath.Rel,
		"Separator":     filepath.Separator,
		"SkipDir":       filepath.SkipDir,
		"Split":         filepath.Split,
		"SplitList":     filepath.SplitList,
		"ToSlash":       filepath.ToSlash,
		"VolumeName":    filepath.VolumeName,
		"Walk":          filepath.Walk,
	},
	"flag": map[string]interface{}{
		"Arg":             flag.Arg,
		"Args":            flag.Args,
		"Bool":            flag.Bool,
		"BoolVar":         flag.BoolVar,
		"CommandLine":     flag.CommandLine,
		"ContinueOnError": flag.ContinueOnError,
		"Duration":        flag.Duration,
		"DurationVar":     flag.DurationVar,
		"ErrHelp":         flag.ErrHelp,
		"ExitOnError":     flag.ExitOnError,
		"Float64":         flag.Float64,
		"Float64Var":      flag.Float64Var,
		"Int":             flag.Int,
		"Int64":           flag.Int64,
		"Int64Var":        flag.Int64Var,
		"IntVar":          flag.IntVar,
		"Lookup":          flag.Lookup,
		"NArg":            flag.NArg,
		"NFlag":           flag.NFlag,
		"NewFlagSet":      flag.NewFlagSet,
		"PanicOnError":    flag.PanicOnError,
		"Parse":           flag.Parse,
		"Parsed":          flag.Parsed,
		"PrintDefaults":   flag.PrintDefaults,
		"Set":             flag.Set,
		"String":          flag.String,
		"StringVar":       flag.StringVar,
		"Uint":            flag.Uint,
		"Uint64":          flag.Uint64,
		"Uint64Var":       flag.Uint64Var,
		"UintVar":         flag.UintVar,
		"UnquoteUsage":    flag.UnquoteUsage,
		"Usage":           flag.Usage,
		"Var":             flag.Var,
		"Visit":           flag.Visit,
		"VisitAll":        flag.VisitAll,
	},
	"flate": map[string]interface{}{
		"BestCompression":    flate.BestCompression,
		"BestSpeed":          flate.BestSpeed,
		"DefaultCompression": flate.DefaultCompression,
		"HuffmanOnly":        flate.HuffmanOnly,
		"NewReader":          flate.NewReader,
		"NewReaderDict":      flate.NewReaderDict,
		"NewWriter":          flate.NewWriter,
		"NewWriterDict":      flate.NewWriterDict,
		"NoCompression":      flate.NoCompression,
	},
	"fmt": map[string]interface{}{
		"Errorf":   fmt.Errorf,
		"Fprint":   fmt.Fprint,
		"Fprintf":  fmt.Fprintf,
		"Fprintln": fmt.Fprintln,
		"Fscan":    fmt.Fscan,
		"Fscanf":   fmt.Fscanf,
		"Fscanln":  fmt.Fscanln,
		"Print":    fmt.Print,
		"Printf":   fmt.Printf,
		"Println":  fmt.Println,
		"Scan":     fmt.Scan,
		"Scanf":    fmt.Scanf,
		"Scanln":   fmt.Scanln,
		"Sprint":   fmt.Sprint,
		"Sprintf":  fmt.Sprintf,
		"Sprintln": fmt.Sprintln,
		"Sscan":    fmt.Sscan,
		"Sscanf":   fmt.Sscanf,
		"Sscanln":  fmt.Sscanln,
	},
	"fnv": map[string]interface{}{
		"New128":  fnv.New128,
		"New128a": fnv.New128a,
		"New32":   fnv.New32,
		"New32a":  fnv.New32a,
		"New64":   fnv.New64,
		"New64a":  fnv.New64a,
	},
	"gif": map[string]interface{}{
		"Decode":             gif.Decode,
		"DecodeAll":          gif.DecodeAll,
		"DecodeConfig":       gif.DecodeConfig,
		"DisposalBackground": gif.DisposalBackground,
		"DisposalNone":       gif.DisposalNone,
		"DisposalPrevious":   gif.DisposalPrevious,
		"Encode":             gif.Encode,
		"EncodeAll":          gif.EncodeAll,
	},
	"gob": map[string]interface{}{
		"NewDecoder":   gob.NewDecoder,
		"NewEncoder":   gob.NewEncoder,
		"Register":     gob.Register,
		"RegisterName": gob.RegisterName,
	},
	"gzip": map[string]interface{}{
		"BestCompression":    gzip.BestCompression,
		"BestSpeed":          gzip.BestSpeed,
		"DefaultCompression": gzip.DefaultCompression,
		"ErrChecksum":        gzip.ErrChecksum,
		"ErrHeader":          gzip.ErrHeader,
		"HuffmanOnly":        gzip.HuffmanOnly,
		"NewReader":          gzip.NewReader,
		"NewWriter":          gzip.NewWriter,
		"NewWriterLevel":     gzip.NewWriterLevel,
		"NoCompression":      gzip.NoCompression,
	},
	"heap": map[string]interface{}{
		"Fix":    heap.Fix,
		"Init":   heap.Init,
		"Pop":    heap.Pop,
		"Push":   heap.Push,
		"Remove": heap.Remove,
	},
	"hex": map[string]interface{}{
		"Decode":         hex.Decode,
		"DecodeString":   hex.DecodeString,
		"DecodedLen":     hex.DecodedLen,
		"Dump":           hex.Dump,
		"Dumper":         hex.Dumper,
		"Encode":         hex.Encode,
		"EncodeToString": hex.EncodeToString,
		"EncodedLen":     hex.EncodedLen,
		"ErrLength":      hex.ErrLength,
		"NewDecoder":     hex.NewDecoder,
		"NewEncoder":     hex.NewEncoder,
	},
	"hmac": map[string]interface{}{
		"Equal": hmac.Equal,
		"New":   hmac.New,
	},
	"htemplate": map[string]interface{}{
		"ErrAmbigContext":      htemplate.ErrAmbigContext,
		"ErrBadHTML":           htemplate.ErrBadHTML,
		"ErrBranchEnd":         htemplate.ErrBranchEnd,
		"ErrEndContext":        htemplate.ErrEndContext,
		"ErrNoSuchTemplate":    htemplate.ErrNoSuchTemplate,
		"ErrOutputContext":     htemplate.ErrOutputContext,
		"ErrPartialCharset":    htemplate.ErrPartialCharset,
		"ErrPartialEscape":     htemplate.ErrPartialEscape,
		"ErrPredefinedEscaper": htemplate.ErrPredefinedEscaper,
		"ErrRangeLoopReentry":  htemplate.ErrRangeLoopReentry,
		"ErrSlashAmbig":        htemplate.ErrSlashAmbig,
		"HTMLEscape":           htemplate.HTMLEscape,
		"HTMLEscapeString":     htemplate.HTMLEscapeString,
		"HTMLEscaper":          htemplate.HTMLEscaper,
		"IsTrue":               htemplate.IsTrue,
		"JSEscape":             htemplate.JSEscape,
		"JSEscapeString":       htemplate.JSEscapeString,
		"JSEscaper":            htemplate.JSEscaper,
		"Must":                 htemplate.Must,
		"New":                  htemplate.New,
		"OK":                   htemplate.OK,
		"ParseFiles":           htemplate.ParseFiles,
		"ParseGlob":            htemplate.ParseGlob,
		"URLQueryEscaper":      htemplate.URLQueryEscaper,
	},
	"html": map[string]interface{}{
		"EscapeString":   html.EscapeString,
		"UnescapeString": html.UnescapeString,
	},
	"http": map[string]interface{}{
		"CanonicalHeaderKey":                  http.CanonicalHeaderKey,
		"DefaultClient":                       http.DefaultClient,
		"DefaultMaxHeaderBytes":               http.DefaultMaxHeaderBytes,
		"DefaultMaxIdleConnsPerHost":          http.DefaultMaxIdleConnsPerHost,
		"DefaultServeMux":                     http.DefaultServeMux,
		"DefaultTransport":                    http.DefaultTransport,
		"DetectContentType":                   http.DetectContentType,
		"ErrAbortHandler":                     http.ErrAbortHandler,
		"ErrBodyNotAllowed":                   http.ErrBodyNotAllowed,
		"ErrBodyReadAfterClose":               http.ErrBodyReadAfterClose,
		"ErrContentLength":                    http.ErrContentLength,
		"ErrHandlerTimeout":                   http.ErrHandlerTimeout,
		"ErrHeaderTooLong":                    http.ErrHeaderTooLong,
		"ErrHijacked":                         http.ErrHijacked,
		"ErrLineTooLong":                      http.ErrLineTooLong,
		"ErrMissingBoundary":                  http.ErrMissingBoundary,
		"ErrMissingContentLength":             http.ErrMissingContentLength,
		"ErrMissingFile":                      http.ErrMissingFile,
		"ErrNoCookie":                         http.ErrNoCookie,
		"ErrNoLocation":                       http.ErrNoLocation,
		"ErrNotMultipart":                     http.ErrNotMultipart,
		"ErrNotSupported":                     http.ErrNotSupported,
		"ErrServerClosed":                     http.ErrServerClosed,
		"ErrShortBody":                        http.ErrShortBody,
		"ErrSkipAltProtocol":                  http.ErrSkipAltProtocol,
		"ErrUnexpectedTrailer":                http.ErrUnexpectedTrailer,
		"ErrUseLastResponse":                  http.ErrUseLastResponse,
		"ErrWriteAfterFlush":                  http.ErrWriteAfterFlush,
		"Error":                               http.Error,
		"FileServer":                          http.FileServer,
		"Get":                                 http.Get,
		"Handle":                              http.Handle,
		"HandleFunc":                          http.HandleFunc,
		"Head":                                http.Head,
		"ListenAndServe":                      http.ListenAndServe,
		"ListenAndServeTLS":                   http.ListenAndServeTLS,
		"LocalAddrContextKey":                 http.LocalAddrContextKey,
		"MaxBytesReader":                      http.MaxBytesReader,
		"MethodConnect":                       http.MethodConnect,
		"MethodDelete":                        http.MethodDelete,
		"MethodGet":                           http.MethodGet,
		"MethodHead":                          http.MethodHead,
		"MethodOptions":                       http.MethodOptions,
		"MethodPatch":                         http.MethodPatch,
		"MethodPost":                          http.MethodPost,
		"MethodPut":                           http.MethodPut,
		"MethodTrace":                         http.MethodTrace,
		"NewFileTransport":                    http.NewFileTransport,
		"NewRequest":                          http.NewRequest,
		"NewServeMux":                         http.NewServeMux,
		"NoBody":                              http.NoBody,
		"NotFound":                            http.NotFound,
		"NotFoundHandler":                     http.NotFoundHandler,
		"ParseHTTPVersion":                    http.ParseHTTPVersion,
		"ParseTime":                           http.ParseTime,
		"Post":                                http.Post,
		"PostForm":                            http.PostForm,
		"ProxyFromEnvironment":                http.ProxyFromEnvironment,
		"ProxyURL":                            http.ProxyURL,
		"ReadRequest":                         http.ReadRequest,
		"ReadResponse":                        http.ReadResponse,
		"Redirect":                            http.Redirect,
		"RedirectHandler":                     http.RedirectHandler,
		"Serve":                               http.Serve,
		"ServeContent":                        http.ServeContent,
		"ServeFile":                           http.ServeFile,
		"ServeTLS":                            http.ServeTLS,
		"ServerContextKey":                    http.ServerContextKey,
		"SetCookie":                           http.SetCookie,
		"StateActive":                         http.StateActive,
		"StateClosed":                         http.StateClosed,
		"StateHijacked":                       http.StateHijacked,
		"StateIdle":                           http.StateIdle,
		"StateNew":                            http.StateNew,
		"StatusAccepted":                      http.StatusAccepted,
		"StatusAlreadyReported":               http.StatusAlreadyReported,
		"StatusBadGateway":                    http.StatusBadGateway,
		"StatusBadRequest":                    http.StatusBadRequest,
		"StatusConflict":                      http.StatusConflict,
		"StatusContinue":                      http.StatusContinue,
		"StatusCreated":                       http.StatusCreated,
		"StatusExpectationFailed":             http.StatusExpectationFailed,
		"StatusFailedDependency":              http.StatusFailedDependency,
		"StatusForbidden":                     http.StatusForbidden,
		"StatusFound":                         http.StatusFound,
		"StatusGatewayTimeout":                http.StatusGatewayTimeout,
		"StatusGone":                          http.StatusGone,
		"StatusHTTPVersionNotSupported":       http.StatusHTTPVersionNotSupported,
		"StatusIMUsed":                        http.StatusIMUsed,
		"StatusInsufficientStorage":           http.StatusInsufficientStorage,
		"StatusInternalServerError":           http.StatusInternalServerError,
		"StatusLengthRequired":                http.StatusLengthRequired,
		"StatusLocked":                        http.StatusLocked,
		"StatusLoopDetected":                  http.StatusLoopDetected,
		"StatusMethodNotAllowed":              http.StatusMethodNotAllowed,
		"StatusMovedPermanently":              http.StatusMovedPermanently,
		"StatusMultiStatus":                   http.StatusMultiStatus,
		"StatusMultipleChoices":               http.StatusMultipleChoices,
		"StatusNetworkAuthenticationRequired": http.StatusNetworkAuthenticationRequired,
		"StatusNoContent":                     http.StatusNoContent,
		"StatusNonAuthoritativeInfo":          http.StatusNonAuthoritativeInfo,
		"StatusNotAcceptable":                 http.StatusNotAcceptable,
		"StatusNotExtended":                   http.StatusNotExtended,
		"StatusNotFound":                      http.StatusNotFound,
		"StatusNotImplemented":                http.StatusNotImplemented,
		"StatusNotModified":                   http.StatusNotModified,
		"StatusOK":                            http.StatusOK,
		"StatusPartialContent":                http.StatusPartialContent,
		"StatusPaymentRequired":               http.StatusPaymentRequired,
		"StatusPermanentRedirect":             http.StatusPermanentRedirect,
		"StatusPreconditionFailed":            http.StatusPreconditionFailed,
		"StatusPreconditionRequired":          http.StatusPreconditionRequired,
		"StatusProcessing":                    http.StatusProcessing,
		"StatusProxyAuthRequired":             http.StatusProxyAuthRequired,
		"StatusRequestEntityTooLarge":         http.StatusRequestEntityTooLarge,
		"StatusRequestHeaderFieldsTooLarge":   http.StatusRequestHeaderFieldsTooLarge,
		"StatusRequestTimeout":                http.StatusRequestTimeout,
		"StatusRequestURITooLong":             http.StatusRequestURITooLong,
		"StatusRequestedRangeNotSatisfiable":  http.StatusRequestedRangeNotSatisfiable,
		"StatusResetContent":                  http.StatusResetContent,
		"StatusSeeOther":                      http.StatusSeeOther,
		"StatusServiceUnavailable":            http.StatusServiceUnavailable,
		"StatusSwitchingProtocols":            http.StatusSwitchingProtocols,
		"StatusTeapot":                        http.StatusTeapot,
		"StatusTemporaryRedirect":             http.StatusTemporaryRedirect,
		"StatusText":                          http.StatusText,
		"StatusTooManyRequests":               http.StatusTooManyRequests,
		"StatusUnauthorized":                  http.StatusUnauthorized,
		"StatusUnavailableForLegalReasons":    http.StatusUnavailableForLegalReasons,
		"StatusUnprocessableEntity":           http.StatusUnprocessableEntity,
		"StatusUnsupportedMediaType":          http.StatusUnsupportedMediaType,
		"StatusUpgradeRequired":               http.StatusUpgradeRequired,
		"StatusUseProxy":                      http.StatusUseProxy,
		"StatusVariantAlsoNegotiates":         http.StatusVariantAlsoNegotiates,
		"StripPrefix":                         http.StripPrefix,
		"TimeFormat":                          http.TimeFormat,
		"TimeoutHandler":                      http.TimeoutHandler,
		"TrailerPrefix":                       http.TrailerPrefix,
	},
	"httptest": map[string]interface{}{
		"DefaultRemoteAddr":  httptest.DefaultRemoteAddr,
		"NewRecorder":        httptest.NewRecorder,
		"NewRequest":         httptest.NewRequest,
		"NewServer":          httptest.NewServer,
		"NewTLSServer":       httptest.NewTLSServer,
		"NewUnstartedServer": httptest.NewUnstartedServer,
	},
	"httptrace": map[string]interface{}{
		"ContextClientTrace": httptrace.ContextClientTrace,
		"WithClientTrace":    httptrace.WithClientTrace,
	},
	"httputil": map[string]interface{}{
		"DumpRequest":               httputil.DumpRequest,
		"DumpRequestOut":            httputil.DumpRequestOut,
		"DumpResponse":              httputil.DumpResponse,
		"ErrClosed":                 httputil.ErrClosed,
		"ErrLineTooLong":            httputil.ErrLineTooLong,
		"ErrPersistEOF":             httputil.ErrPersistEOF,
		"ErrPipeline":               httputil.ErrPipeline,
		"NewChunkedReader":          httputil.NewChunkedReader,
		"NewChunkedWriter":          httputil.NewChunkedWriter,
		"NewClientConn":             httputil.NewClientConn,
		"NewProxyClientConn":        httputil.NewProxyClientConn,
		"NewServerConn":             httputil.NewServerConn,
		"NewSingleHostReverseProxy": httputil.NewSingleHostReverseProxy,
	},
	"image": map[string]interface{}{
		"Black":                  image.Black,
		"Decode":                 image.Decode,
		"DecodeConfig":           image.DecodeConfig,
		"ErrFormat":              image.ErrFormat,
		"NewAlpha":               image.NewAlpha,
		"NewAlpha16":             image.NewAlpha16,
		"NewCMYK":                image.NewCMYK,
		"NewGray":                image.NewGray,
		"NewGray16":              image.NewGray16,
		"NewNRGBA":               image.NewNRGBA,
		"NewNRGBA64":             image.NewNRGBA64,
		"NewNYCbCrA":             image.NewNYCbCrA,
		"NewPaletted":            image.NewPaletted,
		"NewRGBA":                image.NewRGBA,
		"NewRGBA64":              image.NewRGBA64,
		"NewUniform":             image.NewUniform,
		"NewYCbCr":               image.NewYCbCr,
		"Opaque":                 image.Opaque,
		"Pt":                     image.Pt,
		"Rect":                   image.Rect,
		"RegisterFormat":         image.RegisterFormat,
		"Transparent":            image.Transparent,
		"White":                  image.White,
		"YCbCrSubsampleRatio410": image.YCbCrSubsampleRatio410,
		"YCbCrSubsampleRatio411": image.YCbCrSubsampleRatio411,
		"YCbCrSubsampleRatio420": image.YCbCrSubsampleRatio420,
		"YCbCrSubsampleRatio422": image.YCbCrSubsampleRatio422,
		"YCbCrSubsampleRatio440": image.YCbCrSubsampleRatio440,
		"YCbCrSubsampleRatio444": image.YCbCrSubsampleRatio444,
		"ZP":                     image.ZP,
		"ZR":                     image.ZR,
	},
	"io": map[string]interface{}{
		"Copy":             io.Copy,
		"CopyBuffer":       io.CopyBuffer,
		"CopyN":            io.CopyN,
		"EOF":              io.EOF,
		"ErrClosedPipe":    io.ErrClosedPipe,
		"ErrNoProgress":    io.ErrNoProgress,
		"ErrShortBuffer":   io.ErrShortBuffer,
		"ErrShortWrite":    io.ErrShortWrite,
		"ErrUnexpectedEOF": io.ErrUnexpectedEOF,
		"LimitReader":      io.LimitReader,
		"MultiReader":      io.MultiReader,
		"MultiWriter":      io.MultiWriter,
		"NewSectionReader": io.NewSectionReader,
		"Pipe":             io.Pipe,
		"ReadAtLeast":      io.ReadAtLeast,
		"ReadFull":         io.ReadFull,
		"SeekCurrent":      io.SeekCurrent,
		"SeekEnd":          io.SeekEnd,
		"SeekStart":        io.SeekStart,
		"TeeReader":        io.TeeReader,
		"WriteString":      io.WriteString,
	},
	"ioutil": map[string]interface{}{
		"Discard":   ioutil.Discard,
		"NopCloser": ioutil.NopCloser,
		"ReadAll":   ioutil.ReadAll,
		"ReadDir":   ioutil.ReadDir,
		"ReadFile":  ioutil.ReadFile,
		"TempDir":   ioutil.TempDir,
		"TempFile":  ioutil.TempFile,
		"WriteFile": ioutil.WriteFile,
	},
	"jpeg": map[string]interface{}{
		"Decode":         jpeg.Decode,
		"DecodeConfig":   jpeg.DecodeConfig,
		"DefaultQuality": jpeg.DefaultQuality,
		"Encode":         jpeg.Encode,
	},
	"json": map[string]interface{}{
		"Compact":       json.Compact,
		"HTMLEscape":    json.HTMLEscape,
		"Indent":        json.Indent,
		"Marshal":       json.Marshal,
		"MarshalIndent": json.MarshalIndent,
		"NewDecoder":    json.NewDecoder,
		"NewEncoder":    json.NewEncoder,
		"Unmarshal":     json.Unmarshal,
		"Valid":         json.Valid,
	},
	"jsonrpc": map[string]interface{}{
		"Dial":           jsonrpc.Dial,
		"NewClient":      jsonrpc.NewClient,
		"NewClientCodec": jsonrpc.NewClientCodec,
		"NewServerCodec": jsonrpc.NewServerCodec,
		"ServeConn":      jsonrpc.ServeConn,
	},
	"list": map[string]interface{}{
		"New": list.New,
	},
	"log": map[string]interface{}{
		"Fatal":         log.Fatal,
		"Fatalf":        log.Fatalf,
		"Fatalln":       log.Fatalln,
		"Flags":         log.Flags,
		"LUTC":          log.LUTC,
		"Ldate":         log.Ldate,
		"Llongfile":     log.Llongfile,
		"Lmicroseconds": log.Lmicroseconds,
		"Lshortfile":    log.Lshortfile,
		"LstdFlags":     log.LstdFlags,
		"Ltime":         log.Ltime,
		"New":           log.New,
		"Output":        log.Output,
		"Panic":         log.Panic,
		"Panicf":        log.Panicf,
		"Panicln":       log.Panicln,
		"Prefix":        log.Prefix,
		"Print":         log.Print,
		"Printf":        log.Printf,
		"Println":       log.Println,
		"SetFlags":      log.SetFlags,
		"SetOutput":     log.SetOutput,
		"SetPrefix":     log.SetPrefix,
	},
	"lzw": map[string]interface{}{
		"LSB":       lzw.LSB,
		"MSB":       lzw.MSB,
		"NewReader": lzw.NewReader,
		"NewWriter": lzw.NewWriter,
	},
	"mail": map[string]interface{}{
		"ErrHeaderNotPresent": mail.ErrHeaderNotPresent,
		"ParseAddress":        mail.ParseAddress,
		"ParseAddressList":    mail.ParseAddressList,
		"ParseDate":           mail.ParseDate,
		"ReadMessage":         mail.ReadMessage,
	},
	"math": map[string]interface{}{
		"Abs":                    math.Abs,
		"Acos":                   math.Acos,
		"Acosh":                  math.Acosh,
		"Asin":                   math.Asin,
		"Asinh":                  math.Asinh,
		"Atan":                   math.Atan,
		"Atan2":                  math.Atan2,
		"Atanh":                  math.Atanh,
		"Cbrt":                   math.Cbrt,
		"Ceil":                   math.Ceil,
		"Copysign":               math.Copysign,
		"Cos":                    math.Cos,
		"Cosh":                   math.Cosh,
		"Dim":                    math.Dim,
		"E":                      math.E,
		"Erf":                    math.Erf,
		"Erfc":                   math.Erfc,
		"Erfcinv":                math.Erfcinv,
		"Erfinv":                 math.Erfinv,
		"Exp":                    math.Exp,
		"Exp2":                   math.Exp2,
		"Expm1":                  math.Expm1,
		"Float32bits":            math.Float32bits,
		"Float32frombits":        math.Float32frombits,
		"Float64bits":            math.Float64bits,
		"Float64frombits":        math.Float64frombits,
		"Floor":                  math.Floor,
		"Frexp":                  math.Frexp,
		"Gamma":                  math.Gamma,
		"Hypot":                  math.Hypot,
		"Ilogb":                  math.Ilogb,
		"Inf":                    math.Inf,
		"IsInf":                  math.IsInf,
		"IsNaN":                  math.IsNaN,
		"J0":                     math.J0,
		"J1":                     math.J1,
		"Jn":                     math.Jn,
		"Ldexp":                  math.Ldexp,
		"Lgamma":                 math.Lgamma,
		"Ln10":                   math.Ln10,
		"Ln2":                    math.Ln2,
		"Log":                    math.Log,
		"Log10":                  math.Log10,
		"Log10E":                 math.Log10E,
		"Log1p":                  math.Log1p,
		"Log2":                   math.Log2,
		"Log2E":                  math.Log2E,
		"Logb":                   math.Logb,
		"Max":                    math.Max,
		"MaxFloat32":             math.MaxFloat32,
		"MaxFloat64":             math.MaxFloat64,
		"MaxInt16":               math.MaxInt16,
		"MaxInt32":               math.MaxInt32,
		"MaxInt64":               math.MaxInt64,
		"MaxInt8":                math.MaxInt8,
		"MaxUint16":              math.MaxUint16,
		"MaxUint32":              math.MaxUint32,
		"MaxUint64":              uint64(math.MaxUint64),
		"MaxUint8":               math.MaxUint8,
		"Min":                    math.Min,
		"MinInt16":               math.MinInt16,
		"MinInt32":               math.MinInt32,
		"MinInt64":               math.MinInt64,
		"MinInt8":                math.MinInt8,
		"Mod":                    math.Mod,
		"Modf":                   math.Modf,
		"NaN":                    math.NaN,
		"Nextafter":              math.Nextafter,
		"Nextafter32":            math.Nextafter32,
		"Phi":                    math.Phi,
		"Pi":                     math.Pi,
		"Pow":                    math.Pow,
		"Pow10":                  math.Pow10,
		"Remainder":              math.Remainder,
		"Round":                  math.Round,
		"RoundToEven":            math.RoundToEven,
		"Signbit":                math.Signbit,
		"Sin":                    math.Sin,
		"Sincos":                 math.Sincos,
		"Sinh":                   math.Sinh,
		"SmallestNonzeroFloat32": math.SmallestNonzeroFloat32,
		"SmallestNonzeroFloat64": math.SmallestNonzeroFloat64,
		"Sqrt":                   math.Sqrt,
		"Sqrt2":                  math.Sqrt2,
		"SqrtE":                  math.SqrtE,
		"SqrtPhi":                math.SqrtPhi,
		"SqrtPi":                 math.SqrtPi,
		"Tan":                    math.Tan,
		"Tanh":                   math.Tanh,
		"Trunc":                  math.Trunc,
		"Y0":                     math.Y0,
		"Y1":                     math.Y1,
		"Yn":                     math.Yn,
	},
	"md5": map[string]interface{}{
		"BlockSize": md5.BlockSize,
		"New":       md5.New,
		"Size":      md5.Size,
		"Sum":       md5.Sum,
	},
	"mime": map[string]interface{}{
		"AddExtensionType":         mime.AddExtensionType,
		"BEncoding":                mime.BEncoding,
		"ErrInvalidMediaParameter": mime.ErrInvalidMediaParameter,
		"ExtensionsByType":         mime.ExtensionsByType,
		"FormatMediaType":          mime.FormatMediaType,
		"ParseMediaType":           mime.ParseMediaType,
		"QEncoding":                mime.QEncoding,
		"TypeByExtension":          mime.TypeByExtension,
	},
	"multipart": map[string]interface{}{
		"ErrMessageTooLarge": multipart.ErrMessageTooLarge,
		"NewReader":          multipart.NewReader,
		"NewWriter":          multipart.NewWriter,
	},
	"net": map[string]interface{}{
		"CIDRMask":                   net.CIDRMask,
		"DefaultResolver":            net.DefaultResolver,
		"Dial":                       net.Dial,
		"DialIP":                     net.DialIP,
		"DialTCP":                    net.DialTCP,
		"DialTimeout":                net.DialTimeout,
		"DialUDP":                    net.DialUDP,
		"DialUnix":                   net.DialUnix,
		"ErrWriteToConnected":        net.ErrWriteToConnected,
		"FileConn":                   net.FileConn,
		"FileListener":               net.FileListener,
		"FilePacketConn":             net.FilePacketConn,
		"FlagBroadcast":              net.FlagBroadcast,
		"FlagLoopback":               net.FlagLoopback,
		"FlagMulticast":              net.FlagMulticast,
		"FlagPointToPoint":           net.FlagPointToPoint,
		"FlagUp":                     net.FlagUp,
		"IPv4":                       net.IPv4,
		"IPv4Mask":                   net.IPv4Mask,
		"IPv4allrouter":              net.IPv4allrouter,
		"IPv4allsys":                 net.IPv4allsys,
		"IPv4bcast":                  net.IPv4bcast,
		"IPv4len":                    net.IPv4len,
		"IPv4zero":                   net.IPv4zero,
		"IPv6interfacelocalallnodes": net.IPv6interfacelocalallnodes,
		"IPv6len":                    net.IPv6len,
		"IPv6linklocalallnodes":      net.IPv6linklocalallnodes,
		"IPv6linklocalallrouters":    net.IPv6linklocalallrouters,
		"IPv6loopback":               net.IPv6loopback,
		"IPv6unspecified":            net.IPv6unspecified,
		"IPv6zero":                   net.IPv6zero,
		"InterfaceAddrs":             net.InterfaceAddrs,
		"InterfaceByIndex":           net.InterfaceByIndex,
		"InterfaceByName":            net.InterfaceByName,
		"Interfaces":                 net.Interfaces,
		"JoinHostPort":               net.JoinHostPort,
		"Listen":                     net.Listen,
		"ListenIP":                   net.ListenIP,
		"ListenMulticastUDP":         net.ListenMulticastUDP,
		"ListenPacket":               net.ListenPacket,
		"ListenTCP":                  net.ListenTCP,
		"ListenUDP":                  net.ListenUDP,
		"ListenUnix":                 net.ListenUnix,
		"ListenUnixgram":             net.ListenUnixgram,
		"LookupAddr":                 net.LookupAddr,
		"LookupCNAME":                net.LookupCNAME,
		"LookupHost":                 net.LookupHost,
		"LookupIP":                   net.LookupIP,
		"LookupMX":                   net.LookupMX,
		"LookupNS":                   net.LookupNS,
		"LookupPort":                 net.LookupPort,
		"LookupSRV":                  net.LookupSRV,
		"LookupTXT":                  net.LookupTXT,
		"ParseCIDR":                  net.ParseCIDR,
		"ParseIP":                    net.ParseIP,
		"ParseMAC":                   net.ParseMAC,
		"Pipe":                       net.Pipe,
		"ResolveIPAddr":              net.ResolveIPAddr,
		"ResolveTCPAddr":             net.ResolveTCPAddr,
		"ResolveUDPAddr":             net.ResolveUDPAddr,
		"ResolveUnixAddr":            net.ResolveUnixAddr,
		"SplitHostPort":              net.SplitHostPort,
	},
	"os": map[string]interface{}{
		"Args":              os.Args,
		"Chdir":             os.Chdir,
		"Chmod":             os.Chmod,
		"Chown":             os.Chown,
		"Chtimes":           os.Chtimes,
		"Clearenv":          os.Clearenv,
		"Create":            os.Create,
		"DevNull":           os.DevNull,
		"Environ":           os.Environ,
		"ErrClosed":         os.ErrClosed,
		"ErrExist":          os.ErrExist,
		"ErrInvalid":        os.ErrInvalid,
		"ErrNoDeadline":     os.ErrNoDeadline,
		"ErrNotExist":       os.ErrNotExist,
		"ErrPermission":     os.ErrPermission,
		"Executable":        os.Executable,
		"Exit":              os.Exit,
		"Expand":            os.Expand,
		"ExpandEnv":         os.ExpandEnv,
		"FindProcess":       os.FindProcess,
		"Getegid":           os.Getegid,
		"Getenv":            os.Getenv,
		"Geteuid":           os.Geteuid,
		"Getgid":            os.Getgid,
		"Getgroups":         os.Getgroups,
		"Getpagesize":       os.Getpagesize,
		"Getpid":            os.Getpid,
		"Getppid":           os.Getppid,
		"Getuid":            os.Getuid,
		"Getwd":             os.Getwd,
		"Hostname":          os.Hostname,
		"Interrupt":         os.Interrupt,
		"IsExist":           os.IsExist,
		"IsNotExist":        os.IsNotExist,
		"IsPathSeparator":   os.IsPathSeparator,
		"IsPermission":      os.IsPermission,
		"IsTimeout":         os.IsTimeout,
		"Kill":              os.Kill,
		"Lchown":            os.Lchown,
		"Link":              os.Link,
		"LookupEnv":         os.LookupEnv,
		"Lstat":             os.Lstat,
		"Mkdir":             os.Mkdir,
		"MkdirAll":          os.MkdirAll,
		"ModeAppend":        os.ModeAppend,
		"ModeCharDevice":    os.ModeCharDevice,
		"ModeDevice":        os.ModeDevice,
		"ModeDir":           os.ModeDir,
		"ModeExclusive":     os.ModeExclusive,
		"ModeNamedPipe":     os.ModeNamedPipe,
		"ModePerm":          os.ModePerm,
		"ModeSetgid":        os.ModeSetgid,
		"ModeSetuid":        os.ModeSetuid,
		"ModeSocket":        os.ModeSocket,
		"ModeSticky":        os.ModeSticky,
		"ModeSymlink":       os.ModeSymlink,
		"ModeTemporary":     os.ModeTemporary,
		"ModeType":          os.ModeType,
		"NewFile":           os.NewFile,
		"NewSyscallError":   os.NewSyscallError,
		"O_APPEND":          os.O_APPEND,
		"O_CREATE":          os.O_CREATE,
		"O_EXCL":            os.O_EXCL,
		"O_RDONLY":          os.O_RDONLY,
		"O_RDWR":            os.O_RDWR,
		"O_SYNC":            os.O_SYNC,
		"O_TRUNC":           os.O_TRUNC,
		"O_WRONLY":          os.O_WRONLY,
		"Open":              os.Open,
		"OpenFile":          os.OpenFile,
		"PathListSeparator": os.PathListSeparator,
		"PathSeparator":     os.PathSeparator,
		"Pipe":              os.Pipe,
		"Readlink":          os.Readlink,
		"Remove":            os.Remove,
		"RemoveAll":         os.RemoveAll,
		"Rename":            os.Rename,
		"SEEK_CUR":          os.SEEK_CUR,
		"SEEK_END":          os.SEEK_END,
		"SEEK_SET":          os.SEEK_SET,
		"SameFile":          os.SameFile,
		"Setenv":            os.Setenv,
		"StartProcess":      os.StartProcess,
		"Stat":              os.Stat,
		"Stderr":            os.Stderr,
		"Stdin":             os.Stdin,
		"Stdout":            os.Stdout,
		"Symlink":           os.Symlink,
		"TempDir":           os.TempDir,
		"Truncate":          os.Truncate,
		"Unsetenv":          os.Unsetenv,
	},
	"palette": map[string]interface{}{
		"Plan9":   palette.Plan9,
		"WebSafe": palette.WebSafe,
	},
	"parse": map[string]interface{}{
		"IsEmptyTree":    parse.IsEmptyTree,
		"New":            parse.New,
		"NewIdentifier":  parse.NewIdentifier,
		"NodeAction":     parse.NodeAction,
		"NodeBool":       parse.NodeBool,
		"NodeChain":      parse.NodeChain,
		"NodeCommand":    parse.NodeCommand,
		"NodeDot":        parse.NodeDot,
		"NodeField":      parse.NodeField,
		"NodeIdentifier": parse.NodeIdentifier,
		"NodeIf":         parse.NodeIf,
		"NodeList":       parse.NodeList,
		"NodeNil":        parse.NodeNil,
		"NodeNumber":     parse.NodeNumber,
		"NodePipe":       parse.NodePipe,
		"NodeRange":      parse.NodeRange,
		"NodeString":     parse.NodeString,
		"NodeTemplate":   parse.NodeTemplate,
		"NodeText":       parse.NodeText,
		"NodeVariable":   parse.NodeVariable,
		"NodeWith":       parse.NodeWith,
		"Parse":          parse.Parse,
	},
	"path": map[string]interface{}{
		"Base":          path.Base,
		"Clean":         path.Clean,
		"Dir":           path.Dir,
		"ErrBadPattern": path.ErrBadPattern,
		"Ext":           path.Ext,
		"IsAbs":         path.IsAbs,
		"Join":          path.Join,
		"Match":         path.Match,
		"Split":         path.Split,
	},
	"pem": map[string]interface{}{
		"Decode":         pem.Decode,
		"Encode":         pem.Encode,
		"EncodeToMemory": pem.EncodeToMemory,
	},
	"plugin": map[string]interface{}{
		"Open": plugin.Open,
	},
	"png": map[string]interface{}{
		"BestCompression":    png.BestCompression,
		"BestSpeed":          png.BestSpeed,
		"Decode":             png.Decode,
		"DecodeConfig":       png.DecodeConfig,
		"DefaultCompression": png.DefaultCompression,
		"Encode":             png.Encode,
		"NoCompression":      png.NoCompression,
	},
	"pprof": map[string]interface{}{
		"Cmdline": pprof.Cmdline,
		"Handler": pprof.Handler,
		"Index":   pprof.Index,
		"Profile": pprof.Profile,
		"Symbol":  pprof.Symbol,
		"Trace":   pprof.Trace,
	},
	"quotedprintable": map[string]interface{}{
		"NewReader": quotedprintable.NewReader,
		"NewWriter": quotedprintable.NewWriter,
	},
	"rand": map[string]interface{}{
		"ExpFloat64":  rand.ExpFloat64,
		"Float32":     rand.Float32,
		"Float64":     rand.Float64,
		"Int":         rand.Int,
		"Int31":       rand.Int31,
		"Int31n":      rand.Int31n,
		"Int63":       rand.Int63,
		"Int63n":      rand.Int63n,
		"Intn":        rand.Intn,
		"New":         rand.New,
		"NewSource":   rand.NewSource,
		"NewZipf":     rand.NewZipf,
		"NormFloat64": rand.NormFloat64,
		"Perm":        rand.Perm,
		"Read":        rand.Read,
		"Seed":        rand.Seed,
		"Shuffle":     rand.Shuffle,
		"Uint32":      rand.Uint32,
		"Uint64":      rand.Uint64,
	},
	"rc4": map[string]interface{}{
		"NewCipher": rc4.NewCipher,
	},
	"reflect": map[string]interface{}{
		"Append":          reflect.Append,
		"AppendSlice":     reflect.AppendSlice,
		"Array":           reflect.Array,
		"ArrayOf":         reflect.ArrayOf,
		"Bool":            reflect.Bool,
		"BothDir":         reflect.BothDir,
		"Chan":            reflect.Chan,
		"ChanOf":          reflect.ChanOf,
		"Complex128":      reflect.Complex128,
		"Complex64":       reflect.Complex64,
		"Copy":            reflect.Copy,
		"DeepEqual":       reflect.DeepEqual,
		"Float32":         reflect.Float32,
		"Float64":         reflect.Float64,
		"Func":            reflect.Func,
		"FuncOf":          reflect.FuncOf,
		"Indirect":        reflect.Indirect,
		"Int":             reflect.Int,
		"Int16":           reflect.Int16,
		"Int32":           reflect.Int32,
		"Int64":           reflect.Int64,
		"Int8":            reflect.Int8,
		"Interface":       reflect.Interface,
		"Invalid":         reflect.Invalid,
		"MakeChan":        reflect.MakeChan,
		"MakeFunc":        reflect.MakeFunc,
		"MakeMap":         reflect.MakeMap,
		"MakeMapWithSize": reflect.MakeMapWithSize,
		"MakeSlice":       reflect.MakeSlice,
		"Map":             reflect.Map,
		"MapOf":           reflect.MapOf,
		"New":             reflect.New,
		"NewAt":           reflect.NewAt,
		"Ptr":             reflect.Ptr,
		"PtrTo":           reflect.PtrTo,
		"RecvDir":         reflect.RecvDir,
		"Select":          reflect.Select,
		"SelectDefault":   reflect.SelectDefault,
		"SelectRecv":      reflect.SelectRecv,
		"SelectSend":      reflect.SelectSend,
		"SendDir":         reflect.SendDir,
		"Slice":           reflect.Slice,
		"SliceOf":         reflect.SliceOf,
		"String":          reflect.String,
		"Struct":          reflect.Struct,
		"StructOf":        reflect.StructOf,
		"Swapper":         reflect.Swapper,
		"TypeOf":          reflect.TypeOf,
		"Uint":            reflect.Uint,
		"Uint16":          reflect.Uint16,
		"Uint32":          reflect.Uint32,
		"Uint64":          reflect.Uint64,
		"Uint8":           reflect.Uint8,
		"Uintptr":         reflect.Uintptr,
		"UnsafePointer":   reflect.UnsafePointer,
		"ValueOf":         reflect.ValueOf,
		"Zero":            reflect.Zero,
	},
	"regexp": map[string]interface{}{
		"Compile":          regexp.Compile,
		"CompilePOSIX":     regexp.CompilePOSIX,
		"Match":            regexp.Match,
		"MatchReader":      regexp.MatchReader,
		"MatchString":      regexp.MatchString,
		"MustCompile":      regexp.MustCompile,
		"MustCompilePOSIX": regexp.MustCompilePOSIX,
		"QuoteMeta":        regexp.QuoteMeta,
	},
	"ring": map[string]interface{}{
		"New": ring.New,
	},
	"rpc": map[string]interface{}{
		"Accept":             rpc.Accept,
		"DefaultDebugPath":   rpc.DefaultDebugPath,
		"DefaultRPCPath":     rpc.DefaultRPCPath,
		"DefaultServer":      rpc.DefaultServer,
		"Dial":               rpc.Dial,
		"DialHTTP":           rpc.DialHTTP,
		"DialHTTPPath":       rpc.DialHTTPPath,
		"ErrShutdown":        rpc.ErrShutdown,
		"HandleHTTP":         rpc.HandleHTTP,
		"NewClient":          rpc.NewClient,
		"NewClientWithCodec": rpc.NewClientWithCodec,
		"NewServer":          rpc.NewServer,
		"Register":           rpc.Register,
		"RegisterName":       rpc.RegisterName,
		"ServeCodec":         rpc.ServeCodec,
		"ServeConn":          rpc.ServeConn,
		"ServeRequest":       rpc.ServeRequest,
	},
	"rsa": map[string]interface{}{
		"DecryptOAEP":               rsa.DecryptOAEP,
		"DecryptPKCS1v15":           rsa.DecryptPKCS1v15,
		"DecryptPKCS1v15SessionKey": rsa.DecryptPKCS1v15SessionKey,
		"EncryptOAEP":               rsa.EncryptOAEP,
		"EncryptPKCS1v15":           rsa.EncryptPKCS1v15,
		"ErrDecryption":             rsa.ErrDecryption,
		"ErrMessageTooLong":         rsa.ErrMessageTooLong,
		"ErrVerification":           rsa.ErrVerification,
		"GenerateKey":               rsa.GenerateKey,
		"GenerateMultiPrimeKey":     rsa.GenerateMultiPrimeKey,
		"PSSSaltLengthAuto":         rsa.PSSSaltLengthAuto,
		"PSSSaltLengthEqualsHash":   rsa.PSSSaltLengthEqualsHash,
		"SignPKCS1v15":              rsa.SignPKCS1v15,
		"SignPSS":                   rsa.SignPSS,
		"VerifyPKCS1v15":            rsa.VerifyPKCS1v15,
		"VerifyPSS":                 rsa.VerifyPSS,
	},
	"scanner": map[string]interface{}{
		"Char":           scanner.Char,
		"Comment":        scanner.Comment,
		"EOF":            scanner.EOF,
		"Float":          scanner.Float,
		"GoTokens":       scanner.GoTokens,
		"GoWhitespace":   scanner.GoWhitespace,
		"Ident":          scanner.Ident,
		"Int":            scanner.Int,
		"RawString":      scanner.RawString,
		"ScanChars":      scanner.ScanChars,
		"ScanComments":   scanner.ScanComments,
		"ScanFloats":     scanner.ScanFloats,
		"ScanIdents":     scanner.ScanIdents,
		"ScanInts":       scanner.ScanInts,
		"ScanRawStrings": scanner.ScanRawStrings,
		"ScanStrings":    scanner.ScanStrings,
		"SkipComments":   scanner.SkipComments,
		"String":         scanner.String,
		"TokenString":    scanner.TokenString,
	},
	"sha1": map[string]interface{}{
		"BlockSize": sha1.BlockSize,
		"New":       sha1.New,
		"Size":      sha1.Size,
		"Sum":       sha1.Sum,
	},
	"sha256": map[string]interface{}{
		"BlockSize": sha256.BlockSize,
		"New":       sha256.New,
		"New224":    sha256.New224,
		"Size":      sha256.Size,
		"Size224":   sha256.Size224,
		"Sum224":    sha256.Sum224,
		"Sum256":    sha256.Sum256,
	},
	"sha512": map[string]interface{}{
		"BlockSize":  sha512.BlockSize,
		"New":        sha512.New,
		"New384":     sha512.New384,
		"New512_224": sha512.New512_224,
		"New512_256": sha512.New512_256,
		"Size":       sha512.Size,
		"Size224":    sha512.Size224,
		"Size256":    sha512.Size256,
		"Size384":    sha512.Size384,
		"Sum384":     sha512.Sum384,
		"Sum512":     sha512.Sum512,
		"Sum512_224": sha512.Sum512_224,
		"Sum512_256": sha512.Sum512_256,
	},
	"signal": map[string]interface{}{
		"Ignore": signal.Ignore,
		"Notify": signal.Notify,
		"Reset":  signal.Reset,
		"Stop":   signal.Stop,
	},
	"smtp": map[string]interface{}{
		"CRAMMD5Auth": smtp.CRAMMD5Auth,
		"Dial":        smtp.Dial,
		"NewClient":   smtp.NewClient,
		"PlainAuth":   smtp.PlainAuth,
		"SendMail":    smtp.SendMail,
	},
	"sort": map[string]interface{}{
		"Float64s":          sort.Float64s,
		"Float64sAreSorted": sort.Float64sAreSorted,
		"Ints":              sort.Ints,
		"IntsAreSorted":     sort.IntsAreSorted,
		"IsSorted":          sort.IsSorted,
		"Reverse":           sort.Reverse,
		"Search":            sort.Search,
		"SearchFloat64s":    sort.SearchFloat64s,
		"SearchInts":        sort.SearchInts,
		"SearchStrings":     sort.SearchStrings,
		"Slice":             sort.Slice,
		"SliceIsSorted":     sort.SliceIsSorted,
		"SliceStable":       sort.SliceStable,
		"Sort":              sort.Sort,
		"Stable":            sort.Stable,
		"Strings":           sort.Strings,
		"StringsAreSorted":  sort.StringsAreSorted,
	},
	"sql": map[string]interface{}{
		"Drivers":              sql.Drivers,
		"ErrConnDone":          sql.ErrConnDone,
		"ErrNoRows":            sql.ErrNoRows,
		"ErrTxDone":            sql.ErrTxDone,
		"LevelDefault":         sql.LevelDefault,
		"LevelLinearizable":    sql.LevelLinearizable,
		"LevelReadCommitted":   sql.LevelReadCommitted,
		"LevelReadUncommitted": sql.LevelReadUncommitted,
		"LevelRepeatableRead":  sql.LevelRepeatableRead,
		"LevelSerializable":    sql.LevelSerializable,
		"LevelSnapshot":        sql.LevelSnapshot,
		"LevelWriteCommitted":  sql.LevelWriteCommitted,
		"Named":                sql.Named,
		"Open":                 sql.Open,
		"OpenDB":               sql.OpenDB,
		"Register":             sql.Register,
	},
	"strconv": map[string]interface{}{
		"AppendBool":               strconv.AppendBool,
		"AppendFloat":              strconv.AppendFloat,
		"AppendInt":                strconv.AppendInt,
		"AppendQuote":              strconv.AppendQuote,
		"AppendQuoteRune":          strconv.AppendQuoteRune,
		"AppendQuoteRuneToASCII":   strconv.AppendQuoteRuneToASCII,
		"AppendQuoteRuneToGraphic": strconv.AppendQuoteRuneToGraphic,
		"AppendQuoteToASCII":       strconv.AppendQuoteToASCII,
		"AppendQuoteToGraphic":     strconv.AppendQuoteToGraphic,
		"AppendUint":               strconv.AppendUint,
		"Atoi":                     strconv.Atoi,
		"CanBackquote":             strconv.CanBackquote,
		"ErrRange":                 strconv.ErrRange,
		"ErrSyntax":                strconv.ErrSyntax,
		"FormatBool":               strconv.FormatBool,
		"FormatFloat":              strconv.FormatFloat,
		"FormatInt":                strconv.FormatInt,
		"FormatUint":               strconv.FormatUint,
		"IntSize":                  strconv.IntSize,
		"IsGraphic":                strconv.IsGraphic,
		"IsPrint":                  strconv.IsPrint,
		"Itoa":                     strconv.Itoa,
		"ParseBool":                strconv.ParseBool,
		"ParseFloat":               strconv.ParseFloat,
		"ParseInt":                 strconv.ParseInt,
		"ParseUint":                strconv.ParseUint,
		"Quote":                    strconv.Quote,
		"QuoteRune":                strconv.QuoteRune,
		"QuoteRuneToASCII":         strconv.QuoteRuneToASCII,
		"QuoteRuneToGraphic":       strconv.QuoteRuneToGraphic,
		"QuoteToASCII":             strconv.QuoteToASCII,
		"QuoteToGraphic":           strconv.QuoteToGraphic,
		"Unquote":                  strconv.Unquote,
		"UnquoteChar":              strconv.UnquoteChar,
	},
	"strings": map[string]interface{}{
		"Compare":        strings.Compare,
		"Contains":       strings.Contains,
		"ContainsAny":    strings.ContainsAny,
		"ContainsRune":   strings.ContainsRune,
		"Count":          strings.Count,
		"EqualFold":      strings.EqualFold,
		"Fields":         strings.Fields,
		"FieldsFunc":     strings.FieldsFunc,
		"HasPrefix":      strings.HasPrefix,
		"HasSuffix":      strings.HasSuffix,
		"Index":          strings.Index,
		"IndexAny":       strings.IndexAny,
		"IndexByte":      strings.IndexByte,
		"IndexFunc":      strings.IndexFunc,
		"IndexRune":      strings.IndexRune,
		"Join":           strings.Join,
		"LastIndex":      strings.LastIndex,
		"LastIndexAny":   strings.LastIndexAny,
		"LastIndexByte":  strings.LastIndexByte,
		"LastIndexFunc":  strings.LastIndexFunc,
		"Map":            strings.Map,
		"NewReader":      strings.NewReader,
		"NewReplacer":    strings.NewReplacer,
		"Repeat":         strings.Repeat,
		"Replace":        strings.Replace,
		"Split":          strings.Split,
		"SplitAfter":     strings.SplitAfter,
		"SplitAfterN":    strings.SplitAfterN,
		"SplitN":         strings.SplitN,
		"Title":          strings.Title,
		"ToLower":        strings.ToLower,
		"ToLowerSpecial": strings.ToLowerSpecial,
		"ToTitle":        strings.ToTitle,
		"ToTitleSpecial": strings.ToTitleSpecial,
		"ToUpper":        strings.ToUpper,
		"ToUpperSpecial": strings.ToUpperSpecial,
		"Trim":           strings.Trim,
		"TrimFunc":       strings.TrimFunc,
		"TrimLeft":       strings.TrimLeft,
		"TrimLeftFunc":   strings.TrimLeftFunc,
		"TrimPrefix":     strings.TrimPrefix,
		"TrimRight":      strings.TrimRight,
		"TrimRightFunc":  strings.TrimRightFunc,
		"TrimSpace":      strings.TrimSpace,
		"TrimSuffix":     strings.TrimSuffix,
	},
	"subtle": map[string]interface{}{
		"ConstantTimeByteEq":   subtle.ConstantTimeByteEq,
		"ConstantTimeCompare":  subtle.ConstantTimeCompare,
		"ConstantTimeCopy":     subtle.ConstantTimeCopy,
		"ConstantTimeEq":       subtle.ConstantTimeEq,
		"ConstantTimeLessOrEq": subtle.ConstantTimeLessOrEq,
		"ConstantTimeSelect":   subtle.ConstantTimeSelect,
	},
	"suffixarray": map[string]interface{}{
		"New": suffixarray.New,
	},
	"sync": map[string]interface{}{
		"NewCond": sync.NewCond,
	},
	"syntax": map[string]interface{}{
		"ClassNL":                  syntax.ClassNL,
		"Compile":                  syntax.Compile,
		"DotNL":                    syntax.DotNL,
		"EmptyBeginLine":           syntax.EmptyBeginLine,
		"EmptyBeginText":           syntax.EmptyBeginText,
		"EmptyEndLine":             syntax.EmptyEndLine,
		"EmptyEndText":             syntax.EmptyEndText,
		"EmptyNoWordBoundary":      syntax.EmptyNoWordBoundary,
		"EmptyOpContext":           syntax.EmptyOpContext,
		"EmptyWordBoundary":        syntax.EmptyWordBoundary,
		"ErrInternalError":         syntax.ErrInternalError,
		"ErrInvalidCharClass":      syntax.ErrInvalidCharClass,
		"ErrInvalidCharRange":      syntax.ErrInvalidCharRange,
		"ErrInvalidEscape":         syntax.ErrInvalidEscape,
		"ErrInvalidNamedCapture":   syntax.ErrInvalidNamedCapture,
		"ErrInvalidPerlOp":         syntax.ErrInvalidPerlOp,
		"ErrInvalidRepeatOp":       syntax.ErrInvalidRepeatOp,
		"ErrInvalidRepeatSize":     syntax.ErrInvalidRepeatSize,
		"ErrInvalidUTF8":           syntax.ErrInvalidUTF8,
		"ErrMissingBracket":        syntax.ErrMissingBracket,
		"ErrMissingParen":          syntax.ErrMissingParen,
		"ErrMissingRepeatArgument": syntax.ErrMissingRepeatArgument,
		"ErrTrailingBackslash":     syntax.ErrTrailingBackslash,
		"ErrUnexpectedParen":       syntax.ErrUnexpectedParen,
		"FoldCase":                 syntax.FoldCase,
		"InstAlt":                  syntax.InstAlt,
		"InstAltMatch":             syntax.InstAltMatch,
		"InstCapture":              syntax.InstCapture,
		"InstEmptyWidth":           syntax.InstEmptyWidth,
		"InstFail":                 syntax.InstFail,
		"InstMatch":                syntax.InstMatch,
		"InstNop":                  syntax.InstNop,
		"InstRune":                 syntax.InstRune,
		"InstRune1":                syntax.InstRune1,
		"InstRuneAny":              syntax.InstRuneAny,
		"InstRuneAnyNotNL":         syntax.InstRuneAnyNotNL,
		"IsWordChar":               syntax.IsWordChar,
		"Literal":                  syntax.Literal,
		"MatchNL":                  syntax.MatchNL,
		"NonGreedy":                syntax.NonGreedy,
		"OneLine":                  syntax.OneLine,
		"OpAlternate":              syntax.OpAlternate,
		"OpAnyChar":                syntax.OpAnyChar,
		"OpAnyCharNotNL":           syntax.OpAnyCharNotNL,
		"OpBeginLine":              syntax.OpBeginLine,
		"OpBeginText":              syntax.OpBeginText,
		"OpCapture":                syntax.OpCapture,
		"OpCharClass":              syntax.OpCharClass,
		"OpConcat":                 syntax.OpConcat,
		"OpEmptyMatch":             syntax.OpEmptyMatch,
		"OpEndLine":                syntax.OpEndLine,
		"OpEndText":                syntax.OpEndText,
		"OpLiteral":                syntax.OpLiteral,
		"OpNoMatch":                syntax.OpNoMatch,
		"OpNoWordBoundary":         syntax.OpNoWordBoundary,
		"OpPlus":                   syntax.OpPlus,
		"OpQuest":                  syntax.OpQuest,
		"OpRepeat":                 syntax.OpRepeat,
		"OpStar":                   syntax.OpStar,
		"OpWordBoundary":           syntax.OpWordBoundary,
		"POSIX":                    syntax.POSIX,
		"Parse":                    syntax.Parse,
		"Perl":                     syntax.Perl,
		"PerlX":                    syntax.PerlX,
		"Simple":                   syntax.Simple,
		"UnicodeGroups":            syntax.UnicodeGroups,
		"WasDollar":                syntax.WasDollar,
	},
	"syslog": map[string]interface{}{
		"Dial":         syslog.Dial,
		"LOG_ALERT":    syslog.LOG_ALERT,
		"LOG_AUTH":     syslog.LOG_AUTH,
		"LOG_AUTHPRIV": syslog.LOG_AUTHPRIV,
		"LOG_CRIT":     syslog.LOG_CRIT,
		"LOG_CRON":     syslog.LOG_CRON,
		"LOG_DAEMON":   syslog.LOG_DAEMON,
		"LOG_DEBUG":    syslog.LOG_DEBUG,
		"LOG_EMERG":    syslog.LOG_EMERG,
		"LOG_ERR":      syslog.LOG_ERR,
		"LOG_FTP":      syslog.LOG_FTP,
		"LOG_INFO":     syslog.LOG_INFO,
		"LOG_KERN":     syslog.LOG_KERN,
		"LOG_LOCAL0":   syslog.LOG_LOCAL0,
		"LOG_LOCAL1":   syslog.LOG_LOCAL1,
		"LOG_LOCAL2":   syslog.LOG_LOCAL2,
		"LOG_LOCAL3":   syslog.LOG_LOCAL3,
		"LOG_LOCAL4":   syslog.LOG_LOCAL4,
		"LOG_LOCAL5":   syslog.LOG_LOCAL5,
		"LOG_LOCAL6":   syslog.LOG_LOCAL6,
		"LOG_LOCAL7":   syslog.LOG_LOCAL7,
		"LOG_LPR":      syslog.LOG_LPR,
		"LOG_MAIL":     syslog.LOG_MAIL,
		"LOG_NEWS":     syslog.LOG_NEWS,
		"LOG_NOTICE":   syslog.LOG_NOTICE,
		"LOG_SYSLOG":   syslog.LOG_SYSLOG,
		"LOG_USER":     syslog.LOG_USER,
		"LOG_UUCP":     syslog.LOG_UUCP,
		"LOG_WARNING":  syslog.LOG_WARNING,
		"New":          syslog.New,
		"NewLogger":    syslog.NewLogger,
	},
	"tabwriter": map[string]interface{}{
		"AlignRight":          tabwriter.AlignRight,
		"Debug":               tabwriter.Debug,
		"DiscardEmptyColumns": tabwriter.DiscardEmptyColumns,
		"Escape":              tabwriter.Escape,
		"FilterHTML":          tabwriter.FilterHTML,
		"NewWriter":           tabwriter.NewWriter,
		"StripEscape":         tabwriter.StripEscape,
		"TabIndent":           tabwriter.TabIndent,
	},
	"tar": map[string]interface{}{
		"ErrFieldTooLong":    tar.ErrFieldTooLong,
		"ErrHeader":          tar.ErrHeader,
		"ErrWriteAfterClose": tar.ErrWriteAfterClose,
		"ErrWriteTooLong":    tar.ErrWriteTooLong,
		"FileInfoHeader":     tar.FileInfoHeader,
		"FormatGNU":          tar.FormatGNU,
		"FormatPAX":          tar.FormatPAX,
		"FormatUSTAR":        tar.FormatUSTAR,
		"FormatUnknown":      tar.FormatUnknown,
		"NewReader":          tar.NewReader,
		"NewWriter":          tar.NewWriter,
		"TypeBlock":          tar.TypeBlock,
		"TypeChar":           tar.TypeChar,
		"TypeCont":           tar.TypeCont,
		"TypeDir":            tar.TypeDir,
		"TypeFifo":           tar.TypeFifo,
		"TypeGNULongLink":    tar.TypeGNULongLink,
		"TypeGNULongName":    tar.TypeGNULongName,
		"TypeGNUSparse":      tar.TypeGNUSparse,
		"TypeLink":           tar.TypeLink,
		"TypeReg":            tar.TypeReg,
		"TypeRegA":           tar.TypeRegA,
		"TypeSymlink":        tar.TypeSymlink,
		"TypeXGlobalHeader":  tar.TypeXGlobalHeader,
		"TypeXHeader":        tar.TypeXHeader,
	},
	"template": map[string]interface{}{
		"HTMLEscape":       template.HTMLEscape,
		"HTMLEscapeString": template.HTMLEscapeString,
		"HTMLEscaper":      template.HTMLEscaper,
		"IsTrue":           template.IsTrue,
		"JSEscape":         template.JSEscape,
		"JSEscapeString":   template.JSEscapeString,
		"JSEscaper":        template.JSEscaper,
		"Must":             template.Must,
		"New":              template.New,
		"ParseFiles":       template.ParseFiles,
		"ParseGlob":        template.ParseGlob,
		"URLQueryEscaper":  template.URLQueryEscaper,
	},
	"textproto": map[string]interface{}{
		"CanonicalMIMEHeaderKey": textproto.CanonicalMIMEHeaderKey,
		"Dial":                   textproto.Dial,
		"NewConn":                textproto.NewConn,
		"NewReader":              textproto.NewReader,
		"NewWriter":              textproto.NewWriter,
		"TrimBytes":              textproto.TrimBytes,
		"TrimString":             textproto.TrimString,
	},
	"time": map[string]interface{}{
		"ANSIC":                  time.ANSIC,
		"After":                  time.After,
		"AfterFunc":              time.AfterFunc,
		"April":                  time.April,
		"August":                 time.August,
		"Date":                   time.Date,
		"December":               time.December,
		"February":               time.February,
		"FixedZone":              time.FixedZone,
		"Friday":                 time.Friday,
		"Hour":                   time.Hour,
		"January":                time.January,
		"July":                   time.July,
		"June":                   time.June,
		"Kitchen":                time.Kitchen,
		"LoadLocation":           time.LoadLocation,
		"LoadLocationFromTZData": time.LoadLocationFromTZData,
		"Local":                  time.Local,
		"March":                  time.March,
		"May":                    time.May,
		"Microsecond":            time.Microsecond,
		"Millisecond":            time.Millisecond,
		"Minute":                 time.Minute,
		"Monday":                 time.Monday,
		"Nanosecond":             time.Nanosecond,
		"NewTicker":              time.NewTicker,
		"NewTimer":               time.NewTimer,
		"November":               time.November,
		"Now":                    time.Now,
		"October":                time.October,
		"Parse":                  time.Parse,
		"ParseDuration":          time.ParseDuration,
		"ParseInLocation":        time.ParseInLocation,
		"RFC1123":                time.RFC1123,
		"RFC1123Z":               time.RFC1123Z,
		"RFC3339":                time.RFC3339,
		"RFC3339Nano":            time.RFC3339Nano,
		"RFC822":                 time.RFC822,
		"RFC822Z":                time.RFC822Z,
		"RFC850":                 time.RFC850,
		"RubyDate":               time.RubyDate,
		"Saturday":               time.Saturday,
		"Second":                 time.Second,
		"September":              time.September,
		"Since":                  time.Since,
		"Sleep":                  time.Sleep,
		"Stamp":                  time.Stamp,
		"StampMicro":             time.StampMicro,
		"StampMilli":             time.StampMilli,
		"StampNano":              time.StampNano,
		"Sunday":                 time.Sunday,
		"Thursday":               time.Thursday,
		"Tick":                   time.Tick,
		"Tuesday":                time.Tuesday,
		"UTC":                    time.UTC,
		"Unix":                   time.Unix,
		"UnixDate":               time.UnixDate,
		"Until":                  time.Until,
		"Wednesday":              time.Wednesday,
	},
	"tls": map[string]interface{}{
		"Client":                               tls.Client,
		"CurveP256":                            tls.CurveP256,
		"CurveP384":                            tls.CurveP384,
		"CurveP521":                            tls.CurveP521,
		"Dial":                                 tls.Dial,
		"DialWithDialer":                       tls.DialWithDialer,
		"ECDSAWithP256AndSHA256":               tls.ECDSAWithP256AndSHA256,
		"ECDSAWithP384AndSHA384":               tls.ECDSAWithP384AndSHA384,
		"ECDSAWithP521AndSHA512":               tls.ECDSAWithP521AndSHA512,
		"ECDSAWithSHA1":                        tls.ECDSAWithSHA1,
		"Listen":                               tls.Listen,
		"LoadX509KeyPair":                      tls.LoadX509KeyPair,
		"NewLRUClientSessionCache":             tls.NewLRUClientSessionCache,
		"NewListener":                          tls.NewListener,
		"NoClientCert":                         tls.NoClientCert,
		"PKCS1WithSHA1":                        tls.PKCS1WithSHA1,
		"PKCS1WithSHA256":                      tls.PKCS1WithSHA256,
		"PKCS1WithSHA384":                      tls.PKCS1WithSHA384,
		"PKCS1WithSHA512":                      tls.PKCS1WithSHA512,
		"PSSWithSHA256":                        tls.PSSWithSHA256,
		"PSSWithSHA384":                        tls.PSSWithSHA384,
		"PSSWithSHA512":                        tls.PSSWithSHA512,
		"RenegotiateFreelyAsClient":            tls.RenegotiateFreelyAsClient,
		"RenegotiateNever":                     tls.RenegotiateNever,
		"RenegotiateOnceAsClient":              tls.RenegotiateOnceAsClient,
		"RequestClientCert":                    tls.RequestClientCert,
		"RequireAndVerifyClientCert":           tls.RequireAndVerifyClientCert,
		"RequireAnyClientCert":                 tls.RequireAnyClientCert,
		"Server":                               tls.Server,
		"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA": tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
		"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256": tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
		"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256": tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
		"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA":    tls.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
		"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384": tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
		"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305":  tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,
		"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA":        tls.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,
		"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA":     tls.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,
		"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA":      tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
		"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256":   tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
		"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256":   tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
		"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA":      tls.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
		"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384":   tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
		"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305":    tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,
		"TLS_ECDHE_RSA_WITH_RC4_128_SHA":          tls.TLS_ECDHE_RSA_WITH_RC4_128_SHA,
		"TLS_FALLBACK_SCSV":                       tls.TLS_FALLBACK_SCSV,
		"TLS_RSA_WITH_3DES_EDE_CBC_SHA":           tls.TLS_RSA_WITH_3DES_EDE_CBC_SHA,
		"TLS_RSA_WITH_AES_128_CBC_SHA":            tls.TLS_RSA_WITH_AES_128_CBC_SHA,
		"TLS_RSA_WITH_AES_128_CBC_SHA256":         tls.TLS_RSA_WITH_AES_128_CBC_SHA256,
		"TLS_RSA_WITH_AES_128_GCM_SHA256":         tls.TLS_RSA_WITH_AES_128_GCM_SHA256,
		"TLS_RSA_WITH_AES_256_CBC_SHA":            tls.TLS_RSA_WITH_AES_256_CBC_SHA,
		"TLS_RSA_WITH_AES_256_GCM_SHA384":         tls.TLS_RSA_WITH_AES_256_GCM_SHA384,
		"TLS_RSA_WITH_RC4_128_SHA":                tls.TLS_RSA_WITH_RC4_128_SHA,
		"VerifyClientCertIfGiven":                 tls.VerifyClientCertIfGiven,
		"VersionSSL30":                            tls.VersionSSL30,
		"VersionTLS10":                            tls.VersionTLS10,
		"VersionTLS11":                            tls.VersionTLS11,
		"VersionTLS12":                            tls.VersionTLS12,
		"X25519":                                  tls.X25519,
		"X509KeyPair":                             tls.X509KeyPair,
	},
	"unicode": map[string]interface{}{
		"ASCII_Hex_Digit":                    unicode.ASCII_Hex_Digit,
		"Adlam":                              unicode.Adlam,
		"Ahom":                               unicode.Ahom,
		"Anatolian_Hieroglyphs":              unicode.Anatolian_Hieroglyphs,
		"Arabic":                             unicode.Arabic,
		"Armenian":                           unicode.Armenian,
		"Avestan":                            unicode.Avestan,
		"AzeriCase":                          unicode.AzeriCase,
		"Balinese":                           unicode.Balinese,
		"Bamum":                              unicode.Bamum,
		"Bassa_Vah":                          unicode.Bassa_Vah,
		"Batak":                              unicode.Batak,
		"Bengali":                            unicode.Bengali,
		"Bhaiksuki":                          unicode.Bhaiksuki,
		"Bidi_Control":                       unicode.Bidi_Control,
		"Bopomofo":                           unicode.Bopomofo,
		"Brahmi":                             unicode.Brahmi,
		"Braille":                            unicode.Braille,
		"Buginese":                           unicode.Buginese,
		"Buhid":                              unicode.Buhid,
		"C":                                  unicode.C,
		"Canadian_Aboriginal":                unicode.Canadian_Aboriginal,
		"Carian":                             unicode.Carian,
		"CaseRanges":                         unicode.CaseRanges,
		"Categories":                         unicode.Categories,
		"Caucasian_Albanian":                 unicode.Caucasian_Albanian,
		"Cc":                                 unicode.Cc,
		"Cf":                                 unicode.Cf,
		"Chakma":                             unicode.Chakma,
		"Cham":                               unicode.Cham,
		"Cherokee":                           unicode.Cherokee,
		"Co":                                 unicode.Co,
		"Common":                             unicode.Common,
		"Coptic":                             unicode.Coptic,
		"Cs":                                 unicode.Cs,
		"Cuneiform":                          unicode.Cuneiform,
		"Cypriot":                            unicode.Cypriot,
		"Cyrillic":                           unicode.Cyrillic,
		"Dash":                               unicode.Dash,
		"Deprecated":                         unicode.Deprecated,
		"Deseret":                            unicode.Deseret,
		"Devanagari":                         unicode.Devanagari,
		"Diacritic":                          unicode.Diacritic,
		"Digit":                              unicode.Digit,
		"Duployan":                           unicode.Duployan,
		"Egyptian_Hieroglyphs":               unicode.Egyptian_Hieroglyphs,
		"Elbasan":                            unicode.Elbasan,
		"Ethiopic":                           unicode.Ethiopic,
		"Extender":                           unicode.Extender,
		"FoldCategory":                       unicode.FoldCategory,
		"FoldScript":                         unicode.FoldScript,
		"Georgian":                           unicode.Georgian,
		"Glagolitic":                         unicode.Glagolitic,
		"Gothic":                             unicode.Gothic,
		"Grantha":                            unicode.Grantha,
		"GraphicRanges":                      unicode.GraphicRanges,
		"Greek":                              unicode.Greek,
		"Gujarati":                           unicode.Gujarati,
		"Gurmukhi":                           unicode.Gurmukhi,
		"Han":                                unicode.Han,
		"Hangul":                             unicode.Hangul,
		"Hanunoo":                            unicode.Hanunoo,
		"Hatran":                             unicode.Hatran,
		"Hebrew":                             unicode.Hebrew,
		"Hex_Digit":                          unicode.Hex_Digit,
		"Hiragana":                           unicode.Hiragana,
		"Hyphen":                             unicode.Hyphen,
		"IDS_Binary_Operator":                unicode.IDS_Binary_Operator,
		"IDS_Trinary_Operator":               unicode.IDS_Trinary_Operator,
		"Ideographic":                        unicode.Ideographic,
		"Imperial_Aramaic":                   unicode.Imperial_Aramaic,
		"In":                                 unicode.In,
		"Inherited":                          unicode.Inherited,
		"Inscriptional_Pahlavi":              unicode.Inscriptional_Pahlavi,
		"Inscriptional_Parthian":             unicode.Inscriptional_Parthian,
		"Is":                                 unicode.Is,
		"IsControl":                          unicode.IsControl,
		"IsDigit":                            unicode.IsDigit,
		"IsGraphic":                          unicode.IsGraphic,
		"IsLetter":                           unicode.IsLetter,
		"IsLower":                            unicode.IsLower,
		"IsMark":                             unicode.IsMark,
		"IsNumber":                           unicode.IsNumber,
		"IsOneOf":                            unicode.IsOneOf,
		"IsPrint":                            unicode.IsPrint,
		"IsPunct":                            unicode.IsPunct,
		"IsSpace":                            unicode.IsSpace,
		"IsSymbol":                           unicode.IsSymbol,
		"IsTitle":                            unicode.IsTitle,
		"IsUpper":                            unicode.IsUpper,
		"Javanese":                           unicode.Javanese,
		"Join_Control":                       unicode.Join_Control,
		"Kaithi":                             unicode.Kaithi,
		"Kannada":                            unicode.Kannada,
		"Katakana":                           unicode.Katakana,
		"Kayah_Li":                           unicode.Kayah_Li,
		"Kharoshthi":                         unicode.Kharoshthi,
		"Khmer":                              unicode.Khmer,
		"Khojki":                             unicode.Khojki,
		"Khudawadi":                          unicode.Khudawadi,
		"L":                                  unicode.L,
		"Lao":                                unicode.Lao,
		"Latin":                              unicode.Latin,
		"Lepcha":                             unicode.Lepcha,
		"Letter":                             unicode.Letter,
		"Limbu":                              unicode.Limbu,
		"Linear_A":                           unicode.Linear_A,
		"Linear_B":                           unicode.Linear_B,
		"Lisu":                               unicode.Lisu,
		"Ll":                                 unicode.Ll,
		"Lm":                                 unicode.Lm,
		"Lo":                                 unicode.Lo,
		"Logical_Order_Exception":            unicode.Logical_Order_Exception,
		"Lower":                              unicode.Lower,
		"LowerCase":                          unicode.LowerCase,
		"Lt":                                 unicode.Lt,
		"Lu":                                 unicode.Lu,
		"Lycian":                             unicode.Lycian,
		"Lydian":                             unicode.Lydian,
		"M":                                  unicode.M,
		"Mahajani":                           unicode.Mahajani,
		"Malayalam":                          unicode.Malayalam,
		"Mandaic":                            unicode.Mandaic,
		"Manichaean":                         unicode.Manichaean,
		"Marchen":                            unicode.Marchen,
		"Mark":                               unicode.Mark,
		"Masaram_Gondi":                      unicode.Masaram_Gondi,
		"MaxASCII":                           unicode.MaxASCII,
		"MaxCase":                            unicode.MaxCase,
		"MaxLatin1":                          unicode.MaxLatin1,
		"MaxRune":                            unicode.MaxRune,
		"Mc":                                 unicode.Mc,
		"Me":                                 unicode.Me,
		"Meetei_Mayek":                       unicode.Meetei_Mayek,
		"Mende_Kikakui":                      unicode.Mende_Kikakui,
		"Meroitic_Cursive":                   unicode.Meroitic_Cursive,
		"Meroitic_Hieroglyphs":               unicode.Meroitic_Hieroglyphs,
		"Miao":                               unicode.Miao,
		"Mn":                                 unicode.Mn,
		"Modi":                               unicode.Modi,
		"Mongolian":                          unicode.Mongolian,
		"Mro":                                unicode.Mro,
		"Multani":                            unicode.Multani,
		"Myanmar":                            unicode.Myanmar,
		"N":                                  unicode.N,
		"Nabataean":                          unicode.Nabataean,
		"Nd":                                 unicode.Nd,
		"New_Tai_Lue":                        unicode.New_Tai_Lue,
		"Newa":                               unicode.Newa,
		"Nko":                                unicode.Nko,
		"Nl":                                 unicode.Nl,
		"No":                                 unicode.No,
		"Noncharacter_Code_Point":            unicode.Noncharacter_Code_Point,
		"Number":                             unicode.Number,
		"Nushu":                              unicode.Nushu,
		"Ogham":                              unicode.Ogham,
		"Ol_Chiki":                           unicode.Ol_Chiki,
		"Old_Hungarian":                      unicode.Old_Hungarian,
		"Old_Italic":                         unicode.Old_Italic,
		"Old_North_Arabian":                  unicode.Old_North_Arabian,
		"Old_Permic":                         unicode.Old_Permic,
		"Old_Persian":                        unicode.Old_Persian,
		"Old_South_Arabian":                  unicode.Old_South_Arabian,
		"Old_Turkic":                         unicode.Old_Turkic,
		"Oriya":                              unicode.Oriya,
		"Osage":                              unicode.Osage,
		"Osmanya":                            unicode.Osmanya,
		"Other":                              unicode.Other,
		"Other_Alphabetic":                   unicode.Other_Alphabetic,
		"Other_Default_Ignorable_Code_Point": unicode.Other_Default_Ignorable_Code_Point,
		"Other_Grapheme_Extend":              unicode.Other_Grapheme_Extend,
		"Other_ID_Continue":                  unicode.Other_ID_Continue,
		"Other_ID_Start":                     unicode.Other_ID_Start,
		"Other_Lowercase":                    unicode.Other_Lowercase,
		"Other_Math":                         unicode.Other_Math,
		"Other_Uppercase":                    unicode.Other_Uppercase,
		"P":                                  unicode.P,
		"Pahawh_Hmong":                       unicode.Pahawh_Hmong,
		"Palmyrene":                          unicode.Palmyrene,
		"Pattern_Syntax":                     unicode.Pattern_Syntax,
		"Pattern_White_Space":                unicode.Pattern_White_Space,
		"Pau_Cin_Hau":                        unicode.Pau_Cin_Hau,
		"Pc":                                 unicode.Pc,
		"Pd":                                 unicode.Pd,
		"Pe":                                 unicode.Pe,
		"Pf":                                 unicode.Pf,
		"Phags_Pa":                           unicode.Phags_Pa,
		"Phoenician":                         unicode.Phoenician,
		"Pi":                                 unicode.Pi,
		"Po":                                 unicode.Po,
		"Prepended_Concatenation_Mark":       unicode.Prepended_Concatenation_Mark,
		"PrintRanges":                        unicode.PrintRanges,
		"Properties":                         unicode.Properties,
		"Ps":                                 unicode.Ps,
		"Psalter_Pahlavi":                    unicode.Psalter_Pahlavi,
		"Punct":                              unicode.Punct,
		"Quotation_Mark":                     unicode.Quotation_Mark,
		"Radical":                            unicode.Radical,
		"Regional_Indicator":                 unicode.Regional_Indicator,
		"Rejang":                             unicode.Rejang,
		"ReplacementChar":                    unicode.ReplacementChar,
		"Runic":                              unicode.Runic,
		"S":                                  unicode.S,
		"STerm":                              unicode.STerm,
		"Samaritan":                          unicode.Samaritan,
		"Saurashtra":                         unicode.Saurashtra,
		"Sc":                                 unicode.Sc,
		"Scripts":                            unicode.Scripts,
		"Sentence_Terminal":                  unicode.Sentence_Terminal,
		"Sharada":                            unicode.Sharada,
		"Shavian":                            unicode.Shavian,
		"Siddham":                            unicode.Siddham,
		"SignWriting":                        unicode.SignWriting,
		"SimpleFold":                         unicode.SimpleFold,
		"Sinhala":                            unicode.Sinhala,
		"Sk":                                 unicode.Sk,
		"Sm":                                 unicode.Sm,
		"So":                                 unicode.So,
		"Soft_Dotted":                        unicode.Soft_Dotted,
		"Sora_Sompeng":                       unicode.Sora_Sompeng,
		"Soyombo":                            unicode.Soyombo,
		"Space":                              unicode.Space,
		"Sundanese":                          unicode.Sundanese,
		"Syloti_Nagri":                       unicode.Syloti_Nagri,
		"Symbol":                             unicode.Symbol,
		"Syriac":                             unicode.Syriac,
		"Tagalog":                            unicode.Tagalog,
		"Tagbanwa":                           unicode.Tagbanwa,
		"Tai_Le":                             unicode.Tai_Le,
		"Tai_Tham":                           unicode.Tai_Tham,
		"Tai_Viet":                           unicode.Tai_Viet,
		"Takri":                              unicode.Takri,
		"Tamil":                              unicode.Tamil,
		"Tangut":                             unicode.Tangut,
		"Telugu":                             unicode.Telugu,
		"Terminal_Punctuation":               unicode.Terminal_Punctuation,
		"Thaana":                             unicode.Thaana,
		"Thai":                               unicode.Thai,
		"Tibetan":                            unicode.Tibetan,
		"Tifinagh":                           unicode.Tifinagh,
		"Tirhuta":                            unicode.Tirhuta,
		"Title":                              unicode.Title,
		"TitleCase":                          unicode.TitleCase,
		"To":                                 unicode.To,
		"ToLower":                            unicode.ToLower,
		"ToTitle":                            unicode.ToTitle,
		"ToUpper":                            unicode.ToUpper,
		"TurkishCase":                        unicode.TurkishCase,
		"Ugaritic":                           unicode.Ugaritic,
		"Unified_Ideograph":                  unicode.Unified_Ideograph,
		"Upper":                              unicode.Upper,
		"UpperCase":                          unicode.UpperCase,
		"UpperLower":                         unicode.UpperLower,
		"Vai":                                unicode.Vai,
		"Variation_Selector":                 unicode.Variation_Selector,
		"Version":                            unicode.Version,
		"Warang_Citi":                        unicode.Warang_Citi,
		"White_Space":                        unicode.White_Space,
		"Yi":                                 unicode.Yi,
		"Z":                                  unicode.Z,
		"Zanabazar_Square":                   unicode.Zanabazar_Square,
		"Zl":                                 unicode.Zl,
		"Zp":                                 unicode.Zp,
		"Zs":                                 unicode.Zs,
	},
	"url": map[string]interface{}{
		"Parse":           url.Parse,
		"ParseQuery":      url.ParseQuery,
		"ParseRequestURI": url.ParseRequestURI,
		"PathEscape":      url.PathEscape,
		"PathUnescape":    url.PathUnescape,
		"QueryEscape":     url.QueryEscape,
		"QueryUnescape":   url.QueryUnescape,
		"User":            url.User,
		"UserPassword":    url.UserPassword,
	},
	"user": map[string]interface{}{
		"Current":       user.Current,
		"Lookup":        user.Lookup,
		"LookupGroup":   user.LookupGroup,
		"LookupGroupId": user.LookupGroupId,
		"LookupId":      user.LookupId,
	},
	"utf16": map[string]interface{}{
		"Decode":      utf16.Decode,
		"DecodeRune":  utf16.DecodeRune,
		"Encode":      utf16.Encode,
		"EncodeRune":  utf16.EncodeRune,
		"IsSurrogate": utf16.IsSurrogate,
	},
	"utf8": map[string]interface{}{
		"DecodeLastRune":         utf8.DecodeLastRune,
		"DecodeLastRuneInString": utf8.DecodeLastRuneInString,
		"DecodeRune":             utf8.DecodeRune,
		"DecodeRuneInString":     utf8.DecodeRuneInString,
		"EncodeRune":             utf8.EncodeRune,
		"FullRune":               utf8.FullRune,
		"FullRuneInString":       utf8.FullRuneInString,
		"MaxRune":                utf8.MaxRune,
		"RuneCount":              utf8.RuneCount,
		"RuneCountInString":      utf8.RuneCountInString,
		"RuneError":              utf8.RuneError,
		"RuneLen":                utf8.RuneLen,
		"RuneSelf":               utf8.RuneSelf,
		"RuneStart":              utf8.RuneStart,
		"UTFMax":                 utf8.UTFMax,
		"Valid":                  utf8.Valid,
		"ValidRune":              utf8.ValidRune,
		"ValidString":            utf8.ValidString,
	},
	"x509": map[string]interface{}{
		"CANotAuthorizedForExtKeyUsage":             x509.CANotAuthorizedForExtKeyUsage,
		"CANotAuthorizedForThisName":                x509.CANotAuthorizedForThisName,
		"CreateCertificate":                         x509.CreateCertificate,
		"CreateCertificateRequest":                  x509.CreateCertificateRequest,
		"DSA":                                       x509.DSA,
		"DSAWithSHA1":                               x509.DSAWithSHA1,
		"DSAWithSHA256":                             x509.DSAWithSHA256,
		"DecryptPEMBlock":                           x509.DecryptPEMBlock,
		"ECDSA":                                     x509.ECDSA,
		"ECDSAWithSHA1":                             x509.ECDSAWithSHA1,
		"ECDSAWithSHA256":                           x509.ECDSAWithSHA256,
		"ECDSAWithSHA384":                           x509.ECDSAWithSHA384,
		"ECDSAWithSHA512":                           x509.ECDSAWithSHA512,
		"EncryptPEMBlock":                           x509.EncryptPEMBlock,
		"ErrUnsupportedAlgorithm":                   x509.ErrUnsupportedAlgorithm,
		"Expired":                                   x509.Expired,
		"ExtKeyUsageAny":                            x509.ExtKeyUsageAny,
		"ExtKeyUsageClientAuth":                     x509.ExtKeyUsageClientAuth,
		"ExtKeyUsageCodeSigning":                    x509.ExtKeyUsageCodeSigning,
		"ExtKeyUsageEmailProtection":                x509.ExtKeyUsageEmailProtection,
		"ExtKeyUsageIPSECEndSystem":                 x509.ExtKeyUsageIPSECEndSystem,
		"ExtKeyUsageIPSECTunnel":                    x509.ExtKeyUsageIPSECTunnel,
		"ExtKeyUsageIPSECUser":                      x509.ExtKeyUsageIPSECUser,
		"ExtKeyUsageMicrosoftCommercialCodeSigning": x509.ExtKeyUsageMicrosoftCommercialCodeSigning,
		"ExtKeyUsageMicrosoftKernelCodeSigning":     x509.ExtKeyUsageMicrosoftKernelCodeSigning,
		"ExtKeyUsageMicrosoftServerGatedCrypto":     x509.ExtKeyUsageMicrosoftServerGatedCrypto,
		"ExtKeyUsageNetscapeServerGatedCrypto":      x509.ExtKeyUsageNetscapeServerGatedCrypto,
		"ExtKeyUsageOCSPSigning":                    x509.ExtKeyUsageOCSPSigning,
		"ExtKeyUsageServerAuth":                     x509.ExtKeyUsageServerAuth,
		"ExtKeyUsageTimeStamping":                   x509.ExtKeyUsageTimeStamping,
		"IncompatibleUsage":                         x509.IncompatibleUsage,
		"IncorrectPasswordError":                    x509.IncorrectPasswordError,
		"IsEncryptedPEMBlock":                       x509.IsEncryptedPEMBlock,
		"KeyUsageCRLSign":                           x509.KeyUsageCRLSign,
		"KeyUsageCertSign":                          x509.KeyUsageCertSign,
		"KeyUsageContentCommitment":                 x509.KeyUsageContentCommitment,
		"KeyUsageDataEncipherment":                  x509.KeyUsageDataEncipherment,
		"KeyUsageDecipherOnly":                      x509.KeyUsageDecipherOnly,
		"KeyUsageDigitalSignature":                  x509.KeyUsageDigitalSignature,
		"KeyUsageEncipherOnly":                      x509.KeyUsageEncipherOnly,
		"KeyUsageKeyAgreement":                      x509.KeyUsageKeyAgreement,
		"KeyUsageKeyEncipherment":                   x509.KeyUsageKeyEncipherment,
		"MD2WithRSA":                                x509.MD2WithRSA,
		"MD5WithRSA":                                x509.MD5WithRSA,
		"MarshalECPrivateKey":                       x509.MarshalECPrivateKey,
		"MarshalPKCS1PrivateKey":                    x509.MarshalPKCS1PrivateKey,
		"MarshalPKCS1PublicKey":                     x509.MarshalPKCS1PublicKey,
		"MarshalPKCS8PrivateKey":                    x509.MarshalPKCS8PrivateKey,
		"MarshalPKIXPublicKey":                      x509.MarshalPKIXPublicKey,
		"NameConstraintsWithoutSANs":                x509.NameConstraintsWithoutSANs,
		"NameMismatch":                              x509.NameMismatch,
		"NewCertPool":                               x509.NewCertPool,
		"NotAuthorizedToSign":                       x509.NotAuthorizedToSign,
		"PEMCipher3DES":                             x509.PEMCipher3DES,
		"PEMCipherAES128":                           x509.PEMCipherAES128,
		"PEMCipherAES192":                           x509.PEMCipherAES192,
		"PEMCipherAES256":                           x509.PEMCipherAES256,
		"PEMCipherDES":                              x509.PEMCipherDES,
		"ParseCRL":                                  x509.ParseCRL,
		"ParseCertificate":                          x509.ParseCertificate,
		"ParseCertificateRequest":                   x509.ParseCertificateRequest,
		"ParseCertificates":                         x509.ParseCertificates,
		"ParseDERCRL":                               x509.ParseDERCRL,
		"ParseECPrivateKey":                         x509.ParseECPrivateKey,
		"ParsePKCS1PrivateKey":                      x509.ParsePKCS1PrivateKey,
		"ParsePKCS1PublicKey":                       x509.ParsePKCS1PublicKey,
		"ParsePKCS8PrivateKey":                      x509.ParsePKCS8PrivateKey,
		"ParsePKIXPublicKey":                        x509.ParsePKIXPublicKey,
		"RSA":                                       x509.RSA,
		"SHA1WithRSA":                               x509.SHA1WithRSA,
		"SHA256WithRSA":                             x509.SHA256WithRSA,
		"SHA256WithRSAPSS":                          x509.SHA256WithRSAPSS,
		"SHA384WithRSA":                             x509.SHA384WithRSA,
		"SHA384WithRSAPSS":                          x509.SHA384WithRSAPSS,
		"SHA512WithRSA":                             x509.SHA512WithRSA,
		"SHA512WithRSAPSS":                          x509.SHA512WithRSAPSS,
		"SystemCertPool":                            x509.SystemCertPool,
		"TooManyConstraints":                        x509.TooManyConstraints,
		"TooManyIntermediates":                      x509.TooManyIntermediates,
		"UnconstrainedName":                         x509.UnconstrainedName,
		"UnknownPublicKeyAlgorithm":                 x509.UnknownPublicKeyAlgorithm,
		"UnknownSignatureAlgorithm":                 x509.UnknownSignatureAlgorithm,
	},
	"xml": map[string]interface{}{
		"CopyToken":       xml.CopyToken,
		"Escape":          xml.Escape,
		"EscapeText":      xml.EscapeText,
		"HTMLAutoClose":   xml.HTMLAutoClose,
		"HTMLEntity":      xml.HTMLEntity,
		"Header":          xml.Header,
		"Marshal":         xml.Marshal,
		"MarshalIndent":   xml.MarshalIndent,
		"NewDecoder":      xml.NewDecoder,
		"NewEncoder":      xml.NewEncoder,
		"NewTokenDecoder": xml.NewTokenDecoder,
		"Unmarshal":       xml.Unmarshal,
	},
	"zip": map[string]interface{}{
		"Deflate":              zip.Deflate,
		"ErrAlgorithm":         zip.ErrAlgorithm,
		"ErrChecksum":          zip.ErrChecksum,
		"ErrFormat":            zip.ErrFormat,
		"FileInfoHeader":       zip.FileInfoHeader,
		"NewReader":            zip.NewReader,
		"NewWriter":            zip.NewWriter,
		"OpenReader":           zip.OpenReader,
		"RegisterCompressor":   zip.RegisterCompressor,
		"RegisterDecompressor": zip.RegisterDecompressor,
		"Store":                zip.Store,
	},
	"zlib": map[string]interface{}{
		"BestCompression":    zlib.BestCompression,
		"BestSpeed":          zlib.BestSpeed,
		"DefaultCompression": zlib.DefaultCompression,
		"ErrChecksum":        zlib.ErrChecksum,
		"ErrDictionary":      zlib.ErrDictionary,
		"ErrHeader":          zlib.ErrHeader,
		"HuffmanOnly":        zlib.HuffmanOnly,
		"NewReader":          zlib.NewReader,
		"NewReaderDict":      zlib.NewReaderDict,
		"NewWriter":          zlib.NewWriter,
		"NewWriterLevel":     zlib.NewWriterLevel,
		"NewWriterLevelDict": zlib.NewWriterLevelDict,
		"NoCompression":      zlib.NoCompression,
	},
}
