package glw

import (
	"testing"

	"golang.org/x/image/math/f32"
)

func rowmul16fv(a, b f32.Mat4) f32.Mat4 {
	// +0 +1 +2 +3
	// +4 +5 +6 +7
	// +8 +9 10 11
	// 12 13 14 15
	return f32.Mat4{
		a[+0]*b[+0] + a[+1]*b[+4] + a[+2]*b[+8] + a[+3]*b[12],
		a[+0]*b[+1] + a[+1]*b[+5] + a[+2]*b[+9] + a[+3]*b[13],
		a[+0]*b[+2] + a[+1]*b[+6] + a[+2]*b[10] + a[+3]*b[14],
		a[+0]*b[+3] + a[+1]*b[+7] + a[+2]*b[11] + a[+3]*b[15],

		a[+4]*b[+0] + a[+5]*b[+4] + a[+6]*b[+8] + a[+7]*b[12],
		a[+4]*b[+1] + a[+5]*b[+5] + a[+6]*b[+9] + a[+7]*b[13],
		a[+4]*b[+2] + a[+5]*b[+6] + a[+6]*b[10] + a[+7]*b[14],
		a[+4]*b[+3] + a[+5]*b[+7] + a[+6]*b[11] + a[+7]*b[15],

		a[+8]*b[+0] + a[+9]*b[+4] + a[10]*b[+8] + a[11]*b[12],
		a[+8]*b[+1] + a[+9]*b[+5] + a[10]*b[+9] + a[11]*b[13],
		a[+8]*b[+2] + a[+9]*b[+6] + a[10]*b[10] + a[11]*b[14],
		a[+8]*b[+3] + a[+9]*b[+7] + a[10]*b[11] + a[11]*b[15],

		a[12]*b[+0] + a[13]*b[+4] + a[14]*b[+8] + a[15]*b[12],
		a[12]*b[+1] + a[13]*b[+5] + a[14]*b[+9] + a[15]*b[13],
		a[12]*b[+2] + a[13]*b[+6] + a[14]*b[10] + a[15]*b[14],
		a[12]*b[+3] + a[13]*b[+7] + a[14]*b[11] + a[15]*b[15],
	}
}

func colmul16fv(a, b f32.Mat4) f32.Mat4 {
	// +0 +4 +8 12
	// +1 +5 +9 13
	// +2 +6 10 14
	// +3 +7 11 15
	return f32.Mat4{
		a[+0]*b[+0] + a[+4]*b[+1] + a[+8]*b[+2] + a[12]*b[+3],
		a[+0]*b[+4] + a[+4]*b[+5] + a[+8]*b[+6] + a[12]*b[+7],
		a[+0]*b[+8] + a[+4]*b[+9] + a[+8]*b[10] + a[12]*b[11],
		a[+0]*b[12] + a[+4]*b[13] + a[+8]*b[14] + a[12]*b[15],

		a[+1]*b[+0] + a[+5]*b[+1] + a[+9]*b[+2] + a[13]*b[+3],
		a[+1]*b[+4] + a[+5]*b[+5] + a[+9]*b[+6] + a[13]*b[+7],
		a[+1]*b[+8] + a[+5]*b[+9] + a[+9]*b[10] + a[13]*b[11],
		a[+1]*b[12] + a[+5]*b[13] + a[+9]*b[14] + a[13]*b[15],

		a[+2]*b[+0] + a[+6]*b[+1] + a[10]*b[+2] + a[14]*b[+3],
		a[+2]*b[+4] + a[+6]*b[+5] + a[10]*b[+6] + a[14]*b[+7],
		a[+2]*b[+8] + a[+6]*b[+9] + a[10]*b[10] + a[14]*b[11],
		a[+2]*b[12] + a[+6]*b[13] + a[10]*b[14] + a[14]*b[15],

		a[+3]*b[+0] + a[+7]*b[+1] + a[11]*b[+2] + a[15]*b[+3],
		a[+3]*b[+4] + a[+7]*b[+5] + a[11]*b[+6] + a[15]*b[+7],
		a[+3]*b[+8] + a[+7]*b[+9] + a[11]*b[10] + a[15]*b[11],
		a[+3]*b[12] + a[+7]*b[13] + a[11]*b[14] + a[15]*b[15],
	}
}

var m f32.Mat4

func BenchmarkRowMul16fv(b *testing.B) {
	q0 := Quat(45, f32.Vec3{0, 0, 1})
	q1 := Quat(90, f32.Vec3{0, 0, 1})
	m0, m1 := quat16fv(q0), quat16fv(q1)
	b.ResetTimer()
	for n := 0; n < b.N; n++ {
		m = rowmul16fv(m0, m1)
	}
}

func BenchmarkColMul16fv(b *testing.B) {
	q0 := Quat(45, f32.Vec3{0, 0, 1})
	q1 := Quat(90, f32.Vec3{0, 0, 1})
	m0, m1 := quat16fv(q0), quat16fv(q1)
	b.ResetTimer()
	for n := 0; n < b.N; n++ {
		m = colmul16fv(m0, m1)
	}
}
